{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 0,
    "pending": 3,
    "failures": 1,
    "start": "2021-03-11T16:17:59.560Z",
    "end": "2021-03-11T16:18:32.838Z",
    "duration": 33278,
    "testsRegistered": 71,
    "passPercent": 0,
    "pendingPercent": 4.225352112676056,
    "other": 0,
    "hasOther": false,
    "skipped": 67,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "a848f64f-9bf8-4028-93da-ca33ea16e6b2",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "646c73e3-0460-4f23-b5ae-515aafa81f12",
          "title": "Default CCJ E2E",
          "fullFile": "/Users/ZeroZerp/Documents/HMCTS/2026/cmc-citizen-frontend/src/integration-test/tests/citizen/ccj/ccj_test.ts",
          "file": "/src/integration-test/tests/citizen/ccj/ccj_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "Default CCJ E2E \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "b18c6365-287c-43ad-8b1d-02dd94b0c191",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "Default CCJ E2E \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "e941800c-ef74-4eff-b2ba-96a64531ffdb",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: Before",
              "fullTitle": "Default CCJ E2E \"before each\" hook: Before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errHandler = (err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n};\nrecorder.errHandler((err) => {\n  errHandler(err);\n});\nif (!fn) throw new Error('fn is not defined');\nevent.emit(event.hook.started, suite);\nif (!recorder.isRunning()) {\n  recorder.start();\n  recorder.errHandler((err) => {\n    errHandler(err);\n  });\n}\nthis.test.body = fn.toString();\nif (isAsyncFunction(fn)) {\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      errHandler(err);\n    });\n    recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, e));\n  });\n  return;\n}\ntry {\n  fn.apply(this, getInjectedArguments(fn));\n  recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n  recorder.add(`finish ${hookName} hook`, () => done());\n  recorder.catch();\n} catch (err) {\n  recorder.throw(err);\n  recorder.catch((e) => {\n    const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n    errHandler(err);\n  });\n  recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, err));\n}",
              "err": {},
              "uuid": "08e57f6c-2132-4253-a055-81feb00b3f1e",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "Default CCJ E2E \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "dbe331ca-c4ee-475d-993b-730e339040fa",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "Default CCJ E2E \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "d18c67e3-02db-41d7-8305-b4dc443dd8c1",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Default CCJ E2E...@nightly @citizen",
              "fullTitle": "Default CCJ E2E: Default CCJ E2E...@nightly @citizen",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userSteps.login(email);\nawait ccjSteps.requestCCJWhenDefendantNotPaid(I, claimRef, defendantType);\nccjSteps.ccjDefendantToPayImmediately();\nccjSteps.validateCheckAndSendPageAnswers(claimantType, claimData.defendants[0], defendantType);\nI.see('County Court Judgment requested', 'h1.bold-large');",
              "err": {},
              "uuid": "273f1435-0495-454e-8a03-e2d6d4f732e0",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "CCJ requested with no defendant email... @citizen @nightly",
              "fullTitle": "Default CCJ E2E: CCJ requested with no defendant email... @citizen @nightly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userSteps.login(email);\nawait ccjSteps.requestCCJ(I, claimRef, defendantType);\nccjSteps.ccjDefendantToPayByInstalments();\nccjSteps.checkCCJFactsAreTrueAndSubmit(claimantType, claimData.defendants[0], defendantType);\nI.see('County Court Judgment requested', 'h1.bold-large');",
              "err": {},
              "uuid": "e4cf02a3-94bc-412f-9a17-e13874cf00fb",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "273f1435-0495-454e-8a03-e2d6d4f732e0",
            "e4cf02a3-94bc-412f-9a17-e13874cf00fb"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "2a297339-7fa0-41a3-844e-dd876e8c240a",
          "title": "Claimant Requested CCJ ",
          "fullFile": "/Users/ZeroZerp/Documents/HMCTS/2026/cmc-citizen-frontend/src/integration-test/tests/citizen/ccj/claimantCCJ_test.ts",
          "file": "/src/integration-test/tests/citizen/ccj/claimantCCJ_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "Claimant Requested CCJ  \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "abc1bdc0-3b03-4dc7-82de-bf53f9af214d",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "Claimant Requested CCJ  \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "1f6f0169-8863-4335-aa86-3101a144d3c3",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: Before",
              "fullTitle": "Claimant Requested CCJ  \"before each\" hook: Before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errHandler = (err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n};\nrecorder.errHandler((err) => {\n  errHandler(err);\n});\nif (!fn) throw new Error('fn is not defined');\nevent.emit(event.hook.started, suite);\nif (!recorder.isRunning()) {\n  recorder.start();\n  recorder.errHandler((err) => {\n    errHandler(err);\n  });\n}\nthis.test.body = fn.toString();\nif (isAsyncFunction(fn)) {\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      errHandler(err);\n    });\n    recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, e));\n  });\n  return;\n}\ntry {\n  fn.apply(this, getInjectedArguments(fn));\n  recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n  recorder.add(`finish ${hookName} hook`, () => done());\n  recorder.catch();\n} catch (err) {\n  recorder.throw(err);\n  recorder.catch((e) => {\n    const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n    errHandler(err);\n  });\n  recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, err));\n}",
              "err": {},
              "uuid": "38379239-f020-4c42-aaf3-bc6e77859220",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "Claimant Requested CCJ  \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "85c1852c-d42f-466c-a327-4fa2dd4eb83a",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "Claimant Requested CCJ  \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "d4cc1316-a457-4f61-86c8-28956e1fa6d0",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Claimant Requested CCJ(Individual Vs Limited Company) Against Limited Company @citizen @nightly",
              "fullTitle": "Claimant Requested CCJ : Claimant Requested CCJ(Individual Vs Limited Company) Against Limited Company @citizen @nightly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userSteps.login(email);\nawait ccjSteps.requestCCJ(I, claimRef, defendantType);\nccjSteps.ccjDefendantToPayBySetDate();\nccjSteps.checkCCJFactsAreTrueAndSubmit(claimantType, claimData.defendants[0], defendantType);\nI.see('County Court Judgment requested', 'h1.bold-large');",
              "err": {},
              "uuid": "f11da316-fe83-42fa-8bcf-ea8019b8c268",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "f11da316-fe83-42fa-8bcf-ea8019b8c268"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "f3b84ab0-16f4-4ab0-9220-5e4d29b9d958",
          "title": "Limited Company Requested CCJ",
          "fullFile": "/Users/ZeroZerp/Documents/HMCTS/2026/cmc-citizen-frontend/src/integration-test/tests/citizen/ccj/companyCCJ_test.ts",
          "file": "/src/integration-test/tests/citizen/ccj/companyCCJ_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "Limited Company Requested CCJ \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "963e5d44-8c24-46de-96df-eb499add96f7",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "Limited Company Requested CCJ \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "10c48951-2d29-45b1-9514-e9c9a10220be",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: Before",
              "fullTitle": "Limited Company Requested CCJ \"before each\" hook: Before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errHandler = (err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n};\nrecorder.errHandler((err) => {\n  errHandler(err);\n});\nif (!fn) throw new Error('fn is not defined');\nevent.emit(event.hook.started, suite);\nif (!recorder.isRunning()) {\n  recorder.start();\n  recorder.errHandler((err) => {\n    errHandler(err);\n  });\n}\nthis.test.body = fn.toString();\nif (isAsyncFunction(fn)) {\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      errHandler(err);\n    });\n    recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, e));\n  });\n  return;\n}\ntry {\n  fn.apply(this, getInjectedArguments(fn));\n  recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n  recorder.add(`finish ${hookName} hook`, () => done());\n  recorder.catch();\n} catch (err) {\n  recorder.throw(err);\n  recorder.catch((e) => {\n    const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n    errHandler(err);\n  });\n  recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, err));\n}",
              "err": {},
              "uuid": "eef583d9-f3a0-43ed-9dd9-1a93397ca3f5",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "Limited Company Requested CCJ \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "36296109-c627-4a1b-a12e-180bec7ab86a",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "Limited Company Requested CCJ \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "ad9084bb-0f54-4cae-b8d8-27c3bc94f60c",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Company Requested CCJ(Company Vs Sole Trader) @nightly",
              "fullTitle": "Limited Company Requested CCJ: Company Requested CCJ(Company Vs Sole Trader) @nightly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userSteps.login(email);\nawait ccjSteps.requestCCJ(I, claimRef, defendantType);\nccjSteps.ccjDefendantToPayBySetDate();\nccjSteps.checkCCJFactsAreTrueAndSubmit(claimantType, claimData.defendants[0], defendantType);\nI.see('County Court Judgment requested', 'h1.bold-large');",
              "err": {},
              "uuid": "86d50b87-c9ca-43ea-8f4a-7e4201c20839",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "86d50b87-c9ca-43ea-8f4a-7e4201c20839"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "4c5c7c88-597b-4448-bf63-80b37b4f1b91",
          "title": "CCJ Requested Against Organisation",
          "fullFile": "/Users/ZeroZerp/Documents/HMCTS/2026/cmc-citizen-frontend/src/integration-test/tests/citizen/ccj/organisation_test.ts",
          "file": "/src/integration-test/tests/citizen/ccj/organisation_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "CCJ Requested Against Organisation \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "c851094f-e862-4564-aa35-f77f1eb2e93c",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "CCJ Requested Against Organisation \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "f0dcf265-7f06-402b-bcd2-00555ac12078",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: Before",
              "fullTitle": "CCJ Requested Against Organisation \"before each\" hook: Before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errHandler = (err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n};\nrecorder.errHandler((err) => {\n  errHandler(err);\n});\nif (!fn) throw new Error('fn is not defined');\nevent.emit(event.hook.started, suite);\nif (!recorder.isRunning()) {\n  recorder.start();\n  recorder.errHandler((err) => {\n    errHandler(err);\n  });\n}\nthis.test.body = fn.toString();\nif (isAsyncFunction(fn)) {\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      errHandler(err);\n    });\n    recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, e));\n  });\n  return;\n}\ntry {\n  fn.apply(this, getInjectedArguments(fn));\n  recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n  recorder.add(`finish ${hookName} hook`, () => done());\n  recorder.catch();\n} catch (err) {\n  recorder.throw(err);\n  recorder.catch((e) => {\n    const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n    errHandler(err);\n  });\n  recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, err));\n}",
              "err": {},
              "uuid": "214d3962-a367-486f-a39a-8aef4788d047",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "CCJ Requested Against Organisation \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "cb71751e-a653-4fd9-9307-b907a1824847",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "CCJ Requested Against Organisation \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "3bb28a98-cbef-441c-a42a-7cadecb04780",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "CCJ requested as a Company, pay by set date @nightly",
              "fullTitle": "CCJ Requested Against Organisation: CCJ requested as a Company, pay by set date @nightly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userSteps.login(email);\nawait ccjSteps.requestCCJ(I, claimRef, defendantType);\nccjSteps.ccjDefendantToPayBySetDate();\nccjSteps.checkCCJFactsAreTrueAndSubmit(claimantType, claimData.defendants[0], defendantType);\nI.see('County Court Judgment requested', 'h1.bold-large');",
              "err": {},
              "uuid": "c30b23f3-a983-40f7-bf07-309b454a761e",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "c30b23f3-a983-40f7-bf07-309b454a761e"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "9e26a208-5bbe-4e40-b0f1-ffe3b4b616d7",
          "title": "CCJ Requested Against Limited Company",
          "fullFile": "/Users/ZeroZerp/Documents/HMCTS/2026/cmc-citizen-frontend/src/integration-test/tests/citizen/ccj/soleTraderCCJ_test.ts",
          "file": "/src/integration-test/tests/citizen/ccj/soleTraderCCJ_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "CCJ Requested Against Limited Company \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "12c6bfa4-097b-4609-874a-bfb346d504b6",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "CCJ Requested Against Limited Company \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "90636741-6f09-4425-b194-599e9fa0edf4",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: Before",
              "fullTitle": "CCJ Requested Against Limited Company \"before each\" hook: Before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errHandler = (err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n};\nrecorder.errHandler((err) => {\n  errHandler(err);\n});\nif (!fn) throw new Error('fn is not defined');\nevent.emit(event.hook.started, suite);\nif (!recorder.isRunning()) {\n  recorder.start();\n  recorder.errHandler((err) => {\n    errHandler(err);\n  });\n}\nthis.test.body = fn.toString();\nif (isAsyncFunction(fn)) {\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      errHandler(err);\n    });\n    recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, e));\n  });\n  return;\n}\ntry {\n  fn.apply(this, getInjectedArguments(fn));\n  recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n  recorder.add(`finish ${hookName} hook`, () => done());\n  recorder.catch();\n} catch (err) {\n  recorder.throw(err);\n  recorder.catch((e) => {\n    const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n    errHandler(err);\n  });\n  recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, err));\n}",
              "err": {},
              "uuid": "49261021-f0de-46e4-b7ca-48b13c5f738e",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "CCJ Requested Against Limited Company \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "73db375d-521c-4bcd-a41e-4770f4b63400",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "CCJ Requested Against Limited Company \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "5175c201-e0a5-4f46-ad3f-d9b7234a92e8",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "CCJ requested as a sole trader, pay immediately... @nightly",
              "fullTitle": "CCJ Requested Against Limited Company: CCJ requested as a sole trader, pay immediately... @nightly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userSteps.login(email);\nawait ccjSteps.requestCCJ(I, claimRef, defendantType);\nccjSteps.ccjDefendantToPayImmediately();\nccjSteps.checkCCJFactsAreTrueAndSubmit(claimantType, claimData.defendants[0], defendantType);\nI.see('County Court Judgment requested', 'h1.bold-large');",
              "err": {},
              "uuid": "a9f9cccd-2740-4216-8d37-02433ccbdef2",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "a9f9cccd-2740-4216-8d37-02433ccbdef2"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "e6393b3b-aa78-43b8-9e40-6aa037aaf102",
          "title": "Claimant Enter details of claim",
          "fullFile": "/Users/ZeroZerp/Documents/HMCTS/2026/cmc-citizen-frontend/src/integration-test/tests/citizen/claim/enterDetails_test.ts",
          "file": "/src/integration-test/tests/citizen/claim/enterDetails_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "Claimant Enter details of claim \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "40e11fe0-9e9d-442e-8077-be9ce81d9a69",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "Claimant Enter details of claim \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "dbc39025-1b8c-4854-ac7b-60144b08745f",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: Before",
              "fullTitle": "Claimant Enter details of claim \"before each\" hook: Before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errHandler = (err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n};\nrecorder.errHandler((err) => {\n  errHandler(err);\n});\nif (!fn) throw new Error('fn is not defined');\nevent.emit(event.hook.started, suite);\nif (!recorder.isRunning()) {\n  recorder.start();\n  recorder.errHandler((err) => {\n    errHandler(err);\n  });\n}\nthis.test.body = fn.toString();\nif (isAsyncFunction(fn)) {\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      errHandler(err);\n    });\n    recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, e));\n  });\n  return;\n}\ntry {\n  fn.apply(this, getInjectedArguments(fn));\n  recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n  recorder.add(`finish ${hookName} hook`, () => done());\n  recorder.catch();\n} catch (err) {\n  recorder.throw(err);\n  recorder.catch((e) => {\n    const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n    errHandler(err);\n  });\n  recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, err));\n}",
              "err": {},
              "uuid": "507b7313-f118-47a7-8c0e-4554f9fcccdd",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "Claimant Enter details of claim \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "ec8841bd-22ec-4da8-961c-4bd0025bb09d",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "Claimant Enter details of claim \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "c84104c1-2520-4310-92e5-23f60a19aee0",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Claim with no interest @citizen",
              "fullTitle": "Claimant Enter details of claim: Claim with no interest @citizen",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await claimSteps.completeStartOfClaimJourney(I, party_type_1.PartyType.INDIVIDUAL, party_type_1.PartyType.INDIVIDUAL, true);\ninterestSteps.skipClaimInterest();\nconst isHwfEnabled = await I.checkHWF();\nif (isHwfEnabled) {\n    hwfSteps.noHWF();\n}\nI.see('Total amount you’re claiming');\nI.click('summary');\nI.see('Claim amount Claim fee Hearing fee');\nI.see('£0.01 to £300 £25 £25');\nI.see('£300.01 to £500 £35 £55');\nI.see('£500.01 to £1,000 £60 £80');\nI.see('£1,000.01 to £1,500 £70 £115');\nI.see('£1,500.01 to £3,000 £105 £170');\nI.see('£3,000.01 to £5,000 £185 £335');\nI.see('£5,000.01 to £10,000 £410 £335');\ninterestSteps.skipClaimantInterestTotalPage();\nI.see('Prepare your claim');\nclaimSteps.enterClaimDetails();\nawait I.bypassPCQ();\nuserSteps.selectCheckAndSubmitYourClaim();\nI.see('£80.50');\nI.see('I don’t want to claim interest');\nawait claimSteps.checkClaimFactsAreTrueAndSubmit(I, party_type_1.PartyType.INDIVIDUAL, party_type_1.PartyType.INDIVIDUAL, true);\nawait paymentSteps.enterWorkingCard(I);\npaymentSteps.cancelPaymentFromConfirmationPage();\nI.waitForText('Your payment has been cancelled');\npaymentSteps.goBackToServiceFromConfirmationPage();\nawait claimSteps.checkClaimFactsAreTrueAndSubmit(I, party_type_1.PartyType.INDIVIDUAL, party_type_1.PartyType.INDIVIDUAL);\nawait paymentSteps.payWithDeclinedCard(I);\nI.waitForText('Your payment has been declined');\npaymentSteps.goBackToServiceFromConfirmationPage();\nawait claimSteps.checkClaimFactsAreTrueAndSubmit(I, party_type_1.PartyType.INDIVIDUAL, party_type_1.PartyType.INDIVIDUAL);\nawait paymentSteps.payWithWorkingCard(I);\nI.waitForText('Claim submitted');",
              "err": {},
              "uuid": "af6ff6b2-6079-4a7e-9ef0-412fd7a87151",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Claim with different interest rate and date @citizen",
              "fullTitle": "Claimant Enter details of claim: Claim with different interest rate and date @citizen",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await claimSteps.completeStartOfClaimJourney(I, party_type_1.PartyType.INDIVIDUAL, party_type_1.PartyType.INDIVIDUAL, true);\ninterestSteps.enterSpecificInterestRateAndDate(2, '1990-01-01');\nconst isHwfEnabled = await I.checkHWF();\nif (isHwfEnabled) {\n    hwfSteps.noHWF();\n}\nI.see('Total amount you’re claiming');\ninterestSteps.skipClaimantInterestTotalPage();\nI.see('Prepare your claim');\nclaimSteps.enterClaimDetails();\nawait I.bypassPCQ().catch(e => { return false; });\nuserSteps.selectCheckAndSubmitYourClaim();\nI.see('£80.50');\nif (process.env.FEATURE_TESTING_SUPPORT === 'true') {\n    testingSupport.deleteClaimDraft();\n}",
              "err": {},
              "uuid": "d6911d96-d389-4924-9227-ab4518fd8884",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Claim with a manually entered interest amount and a daily amount added @citizen",
              "fullTitle": "Claimant Enter details of claim: Claim with a manually entered interest amount and a daily amount added @citizen",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await claimSteps.completeStartOfClaimJourney(I, party_type_1.PartyType.INDIVIDUAL, party_type_1.PartyType.INDIVIDUAL, true);\ninterestSteps.enterBreakdownInterestAmountAndDailyAmount();\nconst isHwfEnabled = await I.checkHWF();\nif (isHwfEnabled) {\n    hwfSteps.noHWF();\n}\nI.see('Total amount you’re claiming');\ninterestSteps.skipClaimantInterestTotalPage();\nI.see('Prepare your claim');\nclaimSteps.enterClaimDetails();\nawait I.bypassPCQ().catch(e => { return false; });\nuserSteps.selectCheckAndSubmitYourClaim();\nI.see('£80.50');\nI.see('Break down interest for different time periods or items');\nI.see('Show how you calculated the amount');\nif (process.env.FEATURE_TESTING_SUPPORT === 'true') {\n    testingSupport.deleteClaimDraft();\n}",
              "err": {},
              "uuid": "772a4ae0-b8af-4f86-a28c-8843b878b53e",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I should not see PCQ if \"Your deails\" are missing while making a claim @citizen",
              "fullTitle": "Claimant Enter details of claim: I should not see PCQ if \"Your deails\" are missing while making a claim @citizen",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "claimSteps.enterClaimDetails();\n// I shouldn't be navigated to PCQ instead I should be taken back to \"Make a money claim\" page\nI.see('Make a money claim');\nI.see('COMPLETE');\nif (process.env.FEATURE_TESTING_SUPPORT === 'true') {\n    testingSupport.deleteClaimDraft();\n}",
              "err": {},
              "uuid": "fea9fd65-a0e2-46d3-9f6f-893046a3c8ac",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I should be redirected to PCQ if \"Your details\" are filled in while making a claim @citizen",
              "fullTitle": "Claimant Enter details of claim: I should be redirected to PCQ if \"Your details\" are filled in while making a claim @citizen",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// add your details\nuserSteps.selectYourDetails();\nclaimSteps.enterMyDetails(party_type_1.PartyType.INDIVIDUAL);\n// I should be taken back to 'Make a money claim'\nI.see('Make a money claim');\nI.see('COMPLETE');\n// add claim details\nclaimSteps.enterClaimDetails();\n// check PCQ health before responding to the PCQ questionaire\nconst pcqHealth = await I.checkPCQHealth();\nif (pcqHealth) {\n    // I refuse to answer PCQ\n    I.rejectAnsweringPCQ();\n}\n// Then i should be taken back to money claim\nI.see('Make a money claim');",
              "err": {},
              "uuid": "a3c0aa54-2705-44d3-923f-1968c97ba7a0",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "af6ff6b2-6079-4a7e-9ef0-412fd7a87151",
            "d6911d96-d389-4924-9227-ab4518fd8884",
            "772a4ae0-b8af-4f86-a28c-8843b878b53e",
            "fea9fd65-a0e2-46d3-9f6f-893046a3c8ac",
            "a3c0aa54-2705-44d3-923f-1968c97ba7a0"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "220edc77-62db-4225-994b-228d868074e4",
          "title": "Help With Fee E2E",
          "fullFile": "/Users/ZeroZerp/Documents/HMCTS/2026/cmc-citizen-frontend/src/integration-test/tests/citizen/claim/helpWithFees_test.ts",
          "file": "/src/integration-test/tests/citizen/claim/helpWithFees_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "Help With Fee E2E \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "7f81093c-6a5e-4f22-96e4-747da3776e51",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "Help With Fee E2E \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "22708461-6917-487e-a6d7-d54f730b337f",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "Help With Fee E2E \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "ec98ab04-f34e-4643-bfa9-0e89e0acfb3a",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "Help With Fee E2E \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "e5b32959-1a35-4d03-8919-feda2613784c",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Submit Claim via HWF Reference... @citizen",
              "fullTitle": "Help With Fee E2E: Submit Claim via HWF Reference... @citizen",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await claimSteps.makeAHwfClaimAndSubmit(I);",
              "err": {},
              "uuid": "92cb8659-6672-4dc2-85e1-29cdd658ad86",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Navigate Payment Page by providing claim details... @smoke-test",
              "fullTitle": "Help With Fee E2E: Navigate Payment Page by providing claim details... @smoke-test",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await claimSteps.makeAClaimAndNavigateUpToPayment(I);",
              "err": {},
              "uuid": "a5dfb374-c39c-4f41-944b-a21f08b1b57c",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": " Navigate Payment Page by Providing HWF reference...  @smoke-test",
              "fullTitle": "Help With Fee E2E:  Navigate Payment Page by Providing HWF reference...  @smoke-test",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await claimSteps.makeAHwfClaimAndNavigateUpToPayment(I);",
              "err": {},
              "uuid": "9b307cdb-e463-4a11-a118-74c4728c899b",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "92cb8659-6672-4dc2-85e1-29cdd658ad86",
            "a5dfb374-c39c-4f41-944b-a21f08b1b57c",
            "9b307cdb-e463-4a11-a118-74c4728c899b"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "651d1dcf-6129-448b-bdca-10c48ef8498d",
          "title": "Claimant Response Fully Admit E2E Tests...",
          "fullFile": "/Users/ZeroZerp/Documents/HMCTS/2026/cmc-citizen-frontend/src/integration-test/tests/citizen/claimantResponse/full_admission_test.ts",
          "file": "/src/integration-test/tests/citizen/claimantResponse/full_admission_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "Claimant Response Fully Admit E2E Tests... \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "c472663b-fb2b-4af8-b081-f219da65eb80",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "Claimant Response Fully Admit E2E Tests... \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "5271b002-b6f3-434c-8490-8f929e932e12",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: Before",
              "fullTitle": "Claimant Response Fully Admit E2E Tests... \"before each\" hook: Before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errHandler = (err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n};\nrecorder.errHandler((err) => {\n  errHandler(err);\n});\nif (!fn) throw new Error('fn is not defined');\nevent.emit(event.hook.started, suite);\nif (!recorder.isRunning()) {\n  recorder.start();\n  recorder.errHandler((err) => {\n    errHandler(err);\n  });\n}\nthis.test.body = fn.toString();\nif (isAsyncFunction(fn)) {\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      errHandler(err);\n    });\n    recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, e));\n  });\n  return;\n}\ntry {\n  fn.apply(this, getInjectedArguments(fn));\n  recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n  recorder.add(`finish ${hookName} hook`, () => done());\n  recorder.catch();\n} catch (err) {\n  recorder.throw(err);\n  recorder.catch((e) => {\n    const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n    errHandler(err);\n  });\n  recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, err));\n}",
              "err": {},
              "uuid": "434686dc-e539-4e91-8d55-8b4b80919df9",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "Claimant Response Fully Admit E2E Tests... \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "343798d5-aa22-41f7-a081-f67d43b448a9",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "Claimant Response Fully Admit E2E Tests... \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "47b1c422-4996-4d81-9b1e-e70eb9994ab1",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": " Defendant agreed to pay all of the claim via immediate payment route... @fullAdmission @citizen @admissions",
              "fullTitle": "Claimant Response Fully Admit E2E Tests...:  Defendant agreed to pay all of the claim via immediate payment route... @fullAdmission @citizen @admissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testData.paymentOption = payment_option_1.PaymentOption.IMMEDIATELY;\n// as defendant\nhelperSteps.finishResponseWithFullAdmission(testData);\nI.click('Sign out');\n// as claimant\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.viewClaimFromDashboard(testData.claimRef);\nI.see(testData.claimRef);\nI.see('The defendant said they’ll pay you immediately');\nI.click('My account');\nI.see(testData.claimRef);\nI.see('Wait for the defendant to pay you');",
              "err": {},
              "uuid": "4a23e7c4-4b02-4820-814b-d782b505ee65",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can as a claimant accept the defendants full admission by set date with settlement agreement and accepting defendants payment method @citizen @admissions",
              "fullTitle": "Claimant Response Fully Admit E2E Tests...: I can as a claimant accept the defendants full admission by set date with settlement agreement and accepting defendants payment method @citizen @admissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testData.paymentOption = payment_option_1.PaymentOption.BY_SET_DATE;\nconst claimantResponseTestData = new ClaimantResponseTestData_1.ClaimantResponseTestData();\n// as defendant\nhelperSteps.finishResponseWithFullAdmission(testData);\nI.click('Sign out');\n// as claimant\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.acceptSettlementFromDashboardWhenAcceptPaymentMethod(testData, claimantResponseTestData, 'View and respond to the offer');\ncheckAndSendPage.verifyFactsForSettlement();\nI.click('input[type=submit]');\nI.see('You’ve signed a settlement agreement');\nconfirmationPage.clickGoToYourAccount();\nI.see(testData.claimRef);\nI.see('You’ve signed a settlement agreement');",
              "err": {},
              "uuid": "5fd9d394-3106-4e83-8f8d-2ae55c602f8f",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can as a claimant accept the defendants full admission by set date with settlement agreement and rejecting defendants payment method in favour of immediate payment @nightly @admissions",
              "fullTitle": "Claimant Response Fully Admit E2E Tests...: I can as a claimant accept the defendants full admission by set date with settlement agreement and rejecting defendants payment method in favour of immediate payment @nightly @admissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testData.paymentOption = payment_option_1.PaymentOption.BY_SET_DATE;\ntestData.claimantPaymentOption = payment_option_1.PaymentOption.IMMEDIATELY;\nconst claimantResponseTestData = new ClaimantResponseTestData_1.ClaimantResponseTestData();\n// as defendant\nhelperSteps.finishResponseWithFullAdmission(testData);\nI.click('Sign out');\n// as claimant\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.acceptSettlementFromDashboardWhenRejectPaymentMethod(testData, claimantResponseTestData, 'View and respond to the offer');\ncheckAndSendPage.verifyFactsForSettlement();\ncheckAndSendPage.submitNoDq();\nconfirmationPage.clickGoToYourAccount();\nI.see(testData.claimRef);\nI.see('You’ve signed a settlement agreement');",
              "err": {},
              "uuid": "2925e73c-992e-482f-8161-b29c943eb527",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can as a claimant accept the defendants full admission by set date with settlement agreement and rejecting defendants payment method in favour of set date @nightly @admissions",
              "fullTitle": "Claimant Response Fully Admit E2E Tests...: I can as a claimant accept the defendants full admission by set date with settlement agreement and rejecting defendants payment method in favour of set date @nightly @admissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testData.paymentOption = payment_option_1.PaymentOption.BY_SET_DATE;\ntestData.claimantPaymentOption = payment_option_1.PaymentOption.BY_SET_DATE;\nconst claimantResponseTestData = new ClaimantResponseTestData_1.ClaimantResponseTestData();\n// as defendant\nhelperSteps.finishResponseWithFullAdmission(testData);\nI.click('Sign out');\n// as claimant\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.acceptSettlementFromDashboardWhenRejectPaymentMethod(testData, claimantResponseTestData, 'View and respond to the offer');\ncheckAndSendPage.verifyFactsForSettlement();\ncheckAndSendPage.submitNoDq();\nI.see('You’ve proposed a different repayment plan');\nconfirmationPage.clickGoToYourAccount();\nI.see(testData.claimRef);\nI.see('You’ve signed a settlement agreement');",
              "err": {},
              "uuid": "289ec9de-28c6-4d27-b10b-aa0c97a96e32",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can as a claimant accept the defendants full admission by set date with settlement agreement and rejecting defendants payment method in favour of instalments @nightly @admissions",
              "fullTitle": "Claimant Response Fully Admit E2E Tests...: I can as a claimant accept the defendants full admission by set date with settlement agreement and rejecting defendants payment method in favour of instalments @nightly @admissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testData.paymentOption = payment_option_1.PaymentOption.BY_SET_DATE;\ntestData.claimantPaymentOption = payment_option_1.PaymentOption.INSTALMENTS;\nconst claimantResponseTestData = new ClaimantResponseTestData_1.ClaimantResponseTestData();\n// as defendant\nhelperSteps.finishResponseWithFullAdmission(testData);\nI.click('Sign out');\n// as claimant\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.acceptSettlementFromDashboardWhenRejectPaymentMethod(testData, claimantResponseTestData, 'View and respond to the offer');\ncheckAndSendPage.verifyFactsForSettlement();\ncheckAndSendPage.submitNoDq();\nI.see('You’ve proposed a different repayment plan');\nconfirmationPage.clickGoToYourAccount();\nI.see(testData.claimRef);\nI.see('You’ve signed a settlement agreement');",
              "err": {},
              "uuid": "cc0fa7af-b67f-4e3d-83cb-91ba05837845",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can as a claimant accept the defendants full admission by instalments with settlement agreement and rejecting defendants payment method in favour of courts proposed repayment plan @citizen @admissions",
              "fullTitle": "Claimant Response Fully Admit E2E Tests...: I can as a claimant accept the defendants full admission by instalments with settlement agreement and rejecting defendants payment method in favour of courts proposed repayment plan @citizen @admissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testData.paymentOption = payment_option_1.PaymentOption.INSTALMENTS;\ntestData.claimantPaymentOption = payment_option_1.PaymentOption.INSTALMENTS;\nconst unreasonableClaimantResponseTestDate = new ClaimantResponseTestData_1.UnreasonableClaimantResponseTestData();\n// as defendant\nhelperSteps.finishResponseWithFullAdmission(testData);\nI.click('Sign out');\n// as claimant\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.acceptCourtOfferedRepaymentPlan(testData, unreasonableClaimantResponseTestDate, 'View and respond to the offer');\ncheckAndSendPage.verifyFactsForSettlement();\nI.see('The court rejected your repayment plan and calculated a more affordable one');\nI.click('input[type=submit]');\nconfirmationPage.clickGoToYourAccount();\nI.see(testData.claimRef);\nI.see('You’ve signed a settlement agreement');",
              "err": {},
              "uuid": "38a42fe3-a77b-4cf5-a601-b72556466e5a",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can as a claimant accept the defendants full admission by set date with CCJ and no previous payments made @admissions @citizen",
              "fullTitle": "Claimant Response Fully Admit E2E Tests...: I can as a claimant accept the defendants full admission by set date with CCJ and no previous payments made @admissions @citizen",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testData.paymentOption = payment_option_1.PaymentOption.BY_SET_DATE;\n// as defendant\nhelperSteps.finishResponseWithFullAdmission(testData);\nI.click('Sign out');\n// as claimant\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.acceptCcjFromDashboardWhenDefendantHasPaidNoneAndAcceptPaymentMethod(testData, 'View and respond to the offer');\nI.see('County Court Judgment requested');\nconfirmationPage.clickGoToYourAccount();\nI.see(testData.claimRef);\nI.see('County Court Judgment');",
              "err": {},
              "uuid": "8305bc1a-4080-466b-8ea9-e8a82cbeba2e",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can as a claimant accept the defendants full admission by set date with CCJ and a previous payment made @admissions @citizen",
              "fullTitle": "Claimant Response Fully Admit E2E Tests...: I can as a claimant accept the defendants full admission by set date with CCJ and a previous payment made @admissions @citizen",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testData.paymentOption = payment_option_1.PaymentOption.BY_SET_DATE;\n// as defendant\nhelperSteps.finishResponseWithFullAdmission(testData);\nI.click('Sign out');\n// as claimant\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.acceptCcjFromDashboardWhenDefendantHasPaidSomeAndAcceptPaymentMethod(testData, 'View and respond to the offer');\nI.see('County Court Judgment requested');\nconfirmationPage.clickGoToYourAccount();\nI.see(testData.claimRef);\nI.see('County Court Judgment');",
              "err": {},
              "uuid": "17265471-18b6-4d0a-b6aa-9db988c8f58b",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Full Admission::Interlocutory judgement E2E ( Repayment plan → suggest counter Repayment plan → reject court determination ) @FullAdmission @citizen @nightly ",
              "fullTitle": "Claimant Response Fully Admit E2E Tests...: Full Admission::Interlocutory judgement E2E ( Repayment plan → suggest counter Repayment plan → reject court determination ) @FullAdmission @citizen @nightly ",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testData.paymentOption = payment_option_1.PaymentOption.INSTALMENTS;\ntestData.claimantPaymentOption = payment_option_1.PaymentOption.INSTALMENTS;\nconst claimantResponseTestData = new ClaimantResponseTestData_1.UnreasonableClaimantResponseTestData();\nclaimantResponseTestData.isExpectingToSeeCourtOfferedInstalmentsPage = true;\nclaimantResponseTestData.pageSpecificValues.settleClaimEnterDate = '2019-01-01';\n// as defendant\nhelperSteps.finishResponseWithFullAdmission(testData);\nI.click('Sign out');\n// as claimant\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.acceptCcjFromDashboardWhenRejectPaymentMethod(testData, claimantResponseTestData, 'View and respond to the offer');\nI.see('County Court Judgment requested');\nconfirmationPage.clickGoToYourAccount();\nI.see(testData.claimRef);",
              "err": {},
              "uuid": "2d6429f0-e157-4bac-ad82-a9cd0450dcc3",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "4a23e7c4-4b02-4820-814b-d782b505ee65",
            "5fd9d394-3106-4e83-8f8d-2ae55c602f8f",
            "2925e73c-992e-482f-8161-b29c943eb527",
            "289ec9de-28c6-4d27-b10b-aa0c97a96e32",
            "cc0fa7af-b67f-4e3d-83cb-91ba05837845",
            "38a42fe3-a77b-4cf5-a601-b72556466e5a",
            "8305bc1a-4080-466b-8ea9-e8a82cbeba2e",
            "17265471-18b6-4d0a-b6aa-9db988c8f58b",
            "2d6429f0-e157-4bac-ad82-a9cd0450dcc3"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "57fba2ff-cb17-4f70-b5c6-9cbca4e9fc8f",
          "title": "Claimant Response ::: Part admit when defendant is business",
          "fullFile": "/Users/ZeroZerp/Documents/HMCTS/2026/cmc-citizen-frontend/src/integration-test/tests/citizen/claimantResponse/part_admission_defendant_is_business_test.ts",
          "file": "/src/integration-test/tests/citizen/claimantResponse/part_admission_defendant_is_business_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "Claimant Response ::: Part admit when defendant is business \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "1cb94081-395e-40a5-b4bd-5c74a2ad507f",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "Claimant Response ::: Part admit when defendant is business \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "b15d15b9-ee02-4453-a01e-31f1b069b2e1",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: Before",
              "fullTitle": "Claimant Response ::: Part admit when defendant is business \"before each\" hook: Before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errHandler = (err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n};\nrecorder.errHandler((err) => {\n  errHandler(err);\n});\nif (!fn) throw new Error('fn is not defined');\nevent.emit(event.hook.started, suite);\nif (!recorder.isRunning()) {\n  recorder.start();\n  recorder.errHandler((err) => {\n    errHandler(err);\n  });\n}\nthis.test.body = fn.toString();\nif (isAsyncFunction(fn)) {\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      errHandler(err);\n    });\n    recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, e));\n  });\n  return;\n}\ntry {\n  fn.apply(this, getInjectedArguments(fn));\n  recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n  recorder.add(`finish ${hookName} hook`, () => done());\n  recorder.catch();\n} catch (err) {\n  recorder.throw(err);\n  recorder.catch((e) => {\n    const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n    errHandler(err);\n  });\n  recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, err));\n}",
              "err": {},
              "uuid": "929279f5-6979-4146-926e-162458267eac",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "Claimant Response ::: Part admit when defendant is business \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "af295c07-33da-4368-8970-d798b1d809ab",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "Claimant Response ::: Part admit when defendant is business \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "95f3abd1-e76b-4a34-94e6-ab2333025c50",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "I can as a claimant accept and suggest an alternative payment intention with instalments @citizen @admissions @business",
              "fullTitle": "Claimant Response ::: Part admit when defendant is business: I can as a claimant accept and suggest an alternative payment intention with instalments @citizen @admissions @business",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testData.defenceType = defence_type_1.DefenceType.PART_ADMISSION_NONE_PAID;\ntestData.paymentOption = payment_option_1.PaymentOption.IMMEDIATELY;\nconst claimantResponseTestData = new ClaimantResponseTestData_1.ClaimantResponseTestData();\n// as defendant\nawait helperSteps.finishResponse(testData, false);\nI.click('Sign out');\n// as claimant\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.viewClaimFromDashboard(testData.claimRef);\nI.click('View and respond');\nclaimantResponseSteps.acceptFullAdmitFromBusinessWithAlternativePaymentIntention(claimantResponseTestData);\ncheckAndSendPage.verifyFactsForPartAdmitFromBusiness();\ncheckAndSendPage.submitNoDq();\nI.see(testData.claimRef);\nI.see('You’ve proposed a different repayment plan');\nI.click('My account');\nI.see(testData.claimRef);\nI.see('You need to send the defendant’s financial details to the court.');",
              "err": {},
              "uuid": "b41a0757-ef4a-4024-a534-7d3074d707a3",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can as a claimant accept and suggest an alternative payment intention with set date @nightly @admissions @business",
              "fullTitle": "Claimant Response ::: Part admit when defendant is business: I can as a claimant accept and suggest an alternative payment intention with set date @nightly @admissions @business",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testData.defenceType = defence_type_1.DefenceType.PART_ADMISSION_NONE_PAID;\ntestData.paymentOption = payment_option_1.PaymentOption.BY_SET_DATE;\n// as defendant\nawait helperSteps.finishResponse(testData, false);\nI.click('Sign out');\n// as claimant\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.viewClaimFromDashboard(testData.claimRef);\nI.click('View and respond');\nclaimantResponseSteps.acceptPartAdmitFromBusinessWithAlternativePaymentIntention();\ncheckAndSendPage.verifyFactsForPartAdmitFromBusiness();\ncheckAndSendPage.submitNoDq();\nI.see(testData.claimRef);\nI.see('You’ve proposed a different repayment plan');\nI.click('My account');\nI.see(testData.claimRef);\nI.see('You need to send the defendant’s financial details to the court.');",
              "err": {},
              "uuid": "c6b5599d-3c95-467d-8ada-964c9dc6f0b2",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "b41a0757-ef4a-4024-a534-7d3074d707a3",
            "c6b5599d-3c95-467d-8ada-964c9dc6f0b2"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "8f36e410-945e-44d4-b943-2302bb7a6a14",
          "title": "Claimant Response: Part Admit",
          "fullFile": "/Users/ZeroZerp/Documents/HMCTS/2026/cmc-citizen-frontend/src/integration-test/tests/citizen/claimantResponse/part_admission_test.ts",
          "file": "/src/integration-test/tests/citizen/claimantResponse/part_admission_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "Claimant Response: Part Admit \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "b6ba7f3b-4b97-41af-890f-78a3fe9bdf3d",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "Claimant Response: Part Admit \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "9e57db31-e8e0-4f66-a8e7-a212576914bb",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: Before",
              "fullTitle": "Claimant Response: Part Admit \"before each\" hook: Before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errHandler = (err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n};\nrecorder.errHandler((err) => {\n  errHandler(err);\n});\nif (!fn) throw new Error('fn is not defined');\nevent.emit(event.hook.started, suite);\nif (!recorder.isRunning()) {\n  recorder.start();\n  recorder.errHandler((err) => {\n    errHandler(err);\n  });\n}\nthis.test.body = fn.toString();\nif (isAsyncFunction(fn)) {\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      errHandler(err);\n    });\n    recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, e));\n  });\n  return;\n}\ntry {\n  fn.apply(this, getInjectedArguments(fn));\n  recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n  recorder.add(`finish ${hookName} hook`, () => done());\n  recorder.catch();\n} catch (err) {\n  recorder.throw(err);\n  recorder.catch((e) => {\n    const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n    errHandler(err);\n  });\n  recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, err));\n}",
              "err": {},
              "uuid": "c02cf0f6-44fb-42f6-b3fc-f39581770ab5",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "Claimant Response: Part Admit \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "e0e92a2c-f93f-430e-9680-ea3182eaeaa7",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "Claimant Response: Part Admit \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "737b33eb-c722-4290-9cb3-d66562febccc",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "I can as a claimant reject the defendants part admission by immediately @nightly @admissions",
              "fullTitle": "Claimant Response: Part Admit: I can as a claimant reject the defendants part admission by immediately @nightly @admissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testData.paymentOption = payment_option_1.PaymentOption.IMMEDIATELY;\ntestData.defenceType = defence_type_1.DefenceType.PART_ADMISSION;\ntestData.defendantClaimsToHavePaidInFull = false;\nconst claimantResponseTestData = new ClaimantResponseTestData_1.ClaimantResponseTestData();\nclaimantResponseTestData.isExpectingToSeeHowTheyWantToPayPage = true;\n// as defendant\nawait helperSteps.finishResponse(testData, false);\nI.click('Sign out');\n// as claimant\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.viewClaimFromDashboard(testData.claimRef);\nclaimantResponseSteps.respondToOffer('View and respond');\nclaimantResponseSteps.reject(testData, claimantResponseTestData);\ncheckAndSendPage.verifyFactsForPartAdmitRejection();\ncheckAndSendPage.checkFactsTrueAndSubmit(testData.defenceType);\nI.see('You agreed to try to resolve the claim using mediation');\nconfirmationPage.clickGoToYourAccount();\nI.see(testData.claimRef);\nI.see('We’ll contact you to try to arrange a mediation appointment');",
              "err": {},
              "uuid": "7f5e14ae-c16e-419b-9ae5-de7e25754bd4",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can as a claimant accept the defendants part admission by immediately with settlement agreement and accepting defendants payment method @nightly @admissions",
              "fullTitle": "Claimant Response: Part Admit: I can as a claimant accept the defendants part admission by immediately with settlement agreement and accepting defendants payment method @nightly @admissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testData.paymentOption = payment_option_1.PaymentOption.IMMEDIATELY;\ntestData.defenceType = defence_type_1.DefenceType.PART_ADMISSION;\ntestData.defendantClaimsToHavePaidInFull = false;\nconst claimantResponseTestData = new ClaimantResponseTestData_1.ClaimantResponseTestData();\nclaimantResponseTestData.isExpectingToSeeHowTheyWantToPayPage = true;\n// as defendant\nawait helperSteps.finishResponse(testData);\nI.click('Sign out');\n// as claimant\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.acceptSettlementFromDashboardWhenAcceptPaymentMethod(testData, claimantResponseTestData, 'View and respond');\ncheckAndSendPage.verifyFactsForSettlement();\ncheckAndSendPage.submitNoDq();\nI.see('You’ve signed a settlement agreement');\nconfirmationPage.clickGoToYourAccount();\nI.see(testData.claimRef);\nI.see('You’ve signed a settlement agreement.');",
              "err": {},
              "uuid": "bf8bbf9a-3fcf-45bd-a86b-90b9a236ac8b",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can as a claimant accept the defendants part admission by instalments with settlement agreement and rejecting defendants payment method in favour of immediate payment @citizen @admissions",
              "fullTitle": "Claimant Response: Part Admit: I can as a claimant accept the defendants part admission by instalments with settlement agreement and rejecting defendants payment method in favour of immediate payment @citizen @admissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testData.paymentOption = payment_option_1.PaymentOption.INSTALMENTS;\ntestData.defenceType = defence_type_1.DefenceType.PART_ADMISSION;\ntestData.claimantPaymentOption = payment_option_1.PaymentOption.IMMEDIATELY;\ntestData.defendantClaimsToHavePaidInFull = false;\nconst claimantResponseTestData = new ClaimantResponseTestData_1.ClaimantResponseTestData();\nclaimantResponseTestData.isExpectingToSeeHowTheyWantToPayPage = true;\n// as defendant\nawait helperSteps.finishResponse(testData);\nI.click('Sign out');\n// as claimant\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.acceptSettlementFromDashboardWhenRejectPaymentMethod(testData, claimantResponseTestData, 'View and respond');\ncheckAndSendPage.verifyFactsForSettlement();\nI.click('input[type=submit]');\nI.see('You’ve signed a settlement agreement');\nconfirmationPage.clickGoToYourAccount();\nI.see(testData.claimRef);\nI.see('You’ve signed a settlement agreement.');",
              "err": {},
              "uuid": "4155921e-d481-4bd7-ad0c-f7b1d948a46a",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can as a claimant accept the defendants part admission by instalments with settlement agreement and rejecting defendants payment method in favour of set date @nightly @admissions",
              "fullTitle": "Claimant Response: Part Admit: I can as a claimant accept the defendants part admission by instalments with settlement agreement and rejecting defendants payment method in favour of set date @nightly @admissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testData.paymentOption = payment_option_1.PaymentOption.INSTALMENTS;\ntestData.defenceType = defence_type_1.DefenceType.PART_ADMISSION;\ntestData.claimantPaymentOption = payment_option_1.PaymentOption.BY_SET_DATE;\ntestData.defendantClaimsToHavePaidInFull = false;\nconst claimantResponseTestData = new ClaimantResponseTestData_1.ClaimantResponseTestData();\nclaimantResponseTestData.isExpectingToSeeHowTheyWantToPayPage = true;\nclaimantResponseTestData.isExpectingToSeeCourtOfferedInstalmentsPage = true;\n// as defendant\nawait helperSteps.finishResponse(testData);\nI.click('Sign out');\n// as claimant\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.acceptSettlementFromDashboardWhenRejectPaymentMethod(testData, claimantResponseTestData, 'View and respond');\ncheckAndSendPage.verifyFactsForSettlement();\ncheckAndSendPage.submitNoDq();\nI.see('You’ve signed a settlement agreement');\nconfirmationPage.clickGoToYourAccount();\nI.see(testData.claimRef);\nI.see('You’ve signed a settlement agreement.');",
              "err": {},
              "uuid": "06fbbed6-5343-4335-a769-196696a78b7b",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can as a claimant accept the defendants part admission by instalments with settlement agreement and rejecting defendants payment method in favour of instalments @nightly @admissions",
              "fullTitle": "Claimant Response: Part Admit: I can as a claimant accept the defendants part admission by instalments with settlement agreement and rejecting defendants payment method in favour of instalments @nightly @admissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testData.paymentOption = payment_option_1.PaymentOption.BY_SET_DATE;\ntestData.defenceType = defence_type_1.DefenceType.PART_ADMISSION;\ntestData.claimantPaymentOption = payment_option_1.PaymentOption.INSTALMENTS;\ntestData.defendantClaimsToHavePaidInFull = false;\nconst claimantResponseTestData = new ClaimantResponseTestData_1.ClaimantResponseTestData();\nclaimantResponseTestData.isExpectingToSeeHowTheyWantToPayPage = true;\n// as defendant\nawait helperSteps.finishResponse(testData);\nI.click('Sign out');\n// as claimant\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.acceptSettlementFromDashboardWhenRejectPaymentMethod(testData, claimantResponseTestData, 'View and respond');\ncheckAndSendPage.verifyFactsForSettlement();\ncheckAndSendPage.submitNoDq();\nI.see('You’ve proposed a different repayment plan');\nconfirmationPage.clickGoToYourAccount();\nI.see(testData.claimRef);\nI.see('You’ve signed a settlement agreement.');",
              "err": {},
              "uuid": "16f89c8a-d4d0-49e0-acf4-283a091f80c4",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "7f5e14ae-c16e-419b-9ae5-de7e25754bd4",
            "bf8bbf9a-3fcf-45bd-a86b-90b9a236ac8b",
            "4155921e-d481-4bd7-ad0c-f7b1d948a46a",
            "06fbbed6-5343-4335-a769-196696a78b7b",
            "16f89c8a-d4d0-49e0-acf4-283a091f80c4"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "237d96d2-c529-4cde-985f-53deddfd11de",
          "title": "Dashboard",
          "fullFile": "/Users/ZeroZerp/Documents/HMCTS/2026/cmc-citizen-frontend/src/integration-test/tests/citizen/dashboard/dashboard_test.ts",
          "file": "/src/integration-test/tests/citizen/dashboard/dashboard_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "Dashboard \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "055ce279-0ba8-4a04-9e7a-99ad1ad0d2dd",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "Dashboard \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "5cf7e04c-7551-4ff6-b277-56dd66260ca9",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "Dashboard \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "7785d7f9-3d68-4954-8ec8-eb31d3e6286a",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "Dashboard \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "3bf86032-687e-4bdb-a02d-04f097f8457e",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Check newly created claim is in my account dashboard with correct claim amount @citizen",
              "fullTitle": "Dashboard: Check newly created claim is in my account dashboard with correct claim amount @citizen",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const email = await I.getClaimantEmail();\nconst claimData = await test_data_1.createClaimData(I, party_type_1.PartyType.INDIVIDUAL, party_type_1.PartyType.INDIVIDUAL);\nconst claimRef = await I.createClaim(claimData, email);\nuserSteps.login(email);\nI.waitForOpenClaim(claimRef);\nI.click('My account');\nI.see('Your money claims account');\nI.see(claimRef + ' ' + `${claimData.defendants[0].title} ${claimData.defendants[0].firstName} ${claimData.defendants[0].lastName}` + ' ' + amountHelper_1.AmountHelper.formatMoney(test_data_1.claimAmount.getTotal()));\nI.click(claimRef);\nI.see('Claim number:');\nI.see(claimRef);\ndashboardClaimDetails.clickViewClaim();\ndashboardClaimDetails.checkClaimData(claimRef, claimData);",
              "err": {},
              "uuid": "3878e8a3-1975-4523-ba62-d7b5a8b975db",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "3878e8a3-1975-4523-ba62-d7b5a8b975db"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "31efede9-9146-4c54-a52f-167fd25cc434",
          "title": "Respond to claim: handoff journey",
          "fullFile": "/Users/ZeroZerp/Documents/HMCTS/2026/cmc-citizen-frontend/src/integration-test/tests/citizen/defence/defence_handoff_test.ts",
          "file": "/src/integration-test/tests/citizen/defence/defence_handoff_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "Respond to claim: handoff journey \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "588b6a75-4acc-4756-ae39-a3415be62d9f",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "Respond to claim: handoff journey \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "9b1c6c22-16ee-4b92-a680-1e57fcfc6dd7",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "Respond to claim: handoff journey \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "034662e3-b285-4fff-8f44-029232531698",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "Respond to claim: handoff journey \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "a16b0d6b-29fd-4fc4-bd56-61d23748a9d7",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "I can see send your response by email page when I reject all of the claim with counter claim @citizen",
              "fullTitle": "Respond to claim: handoff journey: I can see send your response by email page when I reject all of the claim with counter claim @citizen",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const claimantEmail = await I.getClaimantEmail();\nconst defendantEmail = await I.getDefendantEmail();\nconst claimData = await test_data_1.createClaimData(I, party_type_1.PartyType.INDIVIDUAL, party_type_1.PartyType.INDIVIDUAL);\nconst defendant = claimData.defendants[0];\nconst claimant = claimData.claimants[0];\nconst claimRef = await I.createClaim(claimData, claimantEmail, true, []);\nawait helperSteps.enterPinNumber(claimRef, claimantEmail);\nhelperSteps.finishResponseWithHandOff(claimRef, defendant, claimant, defendantEmail, defence_type_1.DefenceType.FULL_REJECTION_WITH_COUNTER_CLAIM);",
              "err": {},
              "uuid": "14509373-b5be-404b-acdd-3286ffb6ef69",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can see send your response by email page when I reject all of the claim with amount paid less than claimed amount @nightly",
              "fullTitle": "Respond to claim: handoff journey: I can see send your response by email page when I reject all of the claim with amount paid less than claimed amount @nightly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const claimantEmail = await I.getClaimantEmail();\nconst defendantEmail = await I.getDefendantEmail();\nconst claimData = await test_data_1.createClaimData(I, party_type_1.PartyType.INDIVIDUAL, party_type_1.PartyType.INDIVIDUAL);\nconst defendant = claimData.defendants[0];\nconst claimant = claimData.claimants[0];\nconst claimRef = await I.createClaim(claimData, claimantEmail, true, []);\nawait helperSteps.enterPinNumber(claimRef, claimantEmail);\nhelperSteps.finishResponseWithHandOff(claimRef, defendant, claimant, defendantEmail, defence_type_1.DefenceType.FULL_REJECTION_BECAUSE_ALREADY_PAID_LESS_THAN_CLAIMED_AMOUNT);",
              "err": {},
              "uuid": "8bc813ee-c4a1-4ddd-900c-7063c7af2a6c",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "14509373-b5be-404b-acdd-3286ffb6ef69",
            "8bc813ee-c4a1-4ddd-900c-7063c7af2a6c"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "2d726199-a69f-4c28-a9a3-cbeec9663802",
          "title": "Fully admit all of the claim",
          "fullFile": "/Users/ZeroZerp/Documents/HMCTS/2026/cmc-citizen-frontend/src/integration-test/tests/citizen/defence/full_admission_test.ts",
          "file": "/src/integration-test/tests/citizen/defence/full_admission_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "Fully admit all of the claim \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "f29aed83-9d70-4f93-939d-2cba9e901845",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "Fully admit all of the claim \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "7b322af3-3c98-480d-9ffc-2f2a97ca5000",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "Fully admit all of the claim \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "3ca6056a-e029-42a8-951a-46b5dc19a1c3",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "Fully admit all of the claim \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "34b4b4e4-2504-4e45-b7fe-319351457b6e",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "I can complete the journey when I fully admit all of the claim with immediate payment @nightly @admissions",
              "fullTitle": "Fully admit all of the claim: I can complete the journey when I fully admit all of the claim with immediate payment @nightly @admissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const claimData = await prepareClaim(I);\ndefenceSteps.makeFullAdmission(claimData.data.defendants[0], party_type_1.PartyType.INDIVIDUAL, payment_option_1.PaymentOption.IMMEDIATELY, claimData.data.claimants[0].name, false);",
              "err": {},
              "uuid": "002361dc-c399-4f6d-ac6c-259566e5affe",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can complete the journey when I fully admit all of the claim with payment by set date @nightly @admissions",
              "fullTitle": "Fully admit all of the claim: I can complete the journey when I fully admit all of the claim with payment by set date @nightly @admissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const claimData = await prepareClaim(I);\ndefenceSteps.makeFullAdmission(claimData.data.defendants[0], party_type_1.PartyType.INDIVIDUAL, payment_option_1.PaymentOption.BY_SET_DATE, claimData.data.claimants[0].name, false);",
              "err": {},
              "uuid": "50d94f94-00a4-4f09-bcd2-9f6907a988be",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can complete the journey when I fully admit all of the claim with full payment by instalments and also see PCQ in my journey @citizen @admissions",
              "fullTitle": "Fully admit all of the claim: I can complete the journey when I fully admit all of the claim with full payment by instalments and also see PCQ in my journey @citizen @admissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const claimData = await prepareClaim(I);\ndefenceSteps.makeFullAdmission(claimData.data.defendants[0], party_type_1.PartyType.INDIVIDUAL, payment_option_1.PaymentOption.INSTALMENTS, claimData.data.claimants[0].name, false, true);",
              "err": {},
              "uuid": "258929bf-e334-4629-8bfb-4907350f6fb1",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "002361dc-c399-4f6d-ac6c-259566e5affe",
            "50d94f94-00a4-4f09-bcd2-9f6907a988be",
            "258929bf-e334-4629-8bfb-4907350f6fb1"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "a42a2c36-8c4c-4809-8d23-02013314ed99",
          "title": "Partially admit the claim",
          "fullFile": "/Users/ZeroZerp/Documents/HMCTS/2026/cmc-citizen-frontend/src/integration-test/tests/citizen/defence/part_admission_test.ts",
          "file": "/src/integration-test/tests/citizen/defence/part_admission_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "Partially admit the claim \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 1723,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "354bceec-e087-4f6c-b814-c0b45362a1cd",
              "parentUUID": "a42a2c36-8c4c-4809-8d23-02013314ed99",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "Partially admit the claim \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "00f8bc15-cc15-479e-9b28-c17f17713b68",
              "parentUUID": "a42a2c36-8c4c-4809-8d23-02013314ed99",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: Before",
              "fullTitle": "Partially admit the claim \"before each\" hook: Before",
              "timedOut": false,
              "duration": 109,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "claimantEmail = await I.getClaimantEmail();\ndefendantEmail = await I.getDefendantEmail();\nclaimData = await test_data_1.createClaimData(I, party_type_1.PartyType.INDIVIDUAL, party_type_1.PartyType.INDIVIDUAL);",
              "err": {},
              "uuid": "d5d6843d-5e05-4bf3-b730-326c96676502",
              "parentUUID": "a42a2c36-8c4c-4809-8d23-02013314ed99",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "Partially admit the claim \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "33298468-0ff2-407b-b2ea-266d0beef866",
              "parentUUID": "a42a2c36-8c4c-4809-8d23-02013314ed99",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "Partially admit the claim \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 107,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "e06c9a4a-c3fd-4ec4-8445-c7a46352bf33",
              "parentUUID": "a42a2c36-8c4c-4809-8d23-02013314ed99",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "I can complete the journey when I partially admit the claim with payment already made @citizen @admissions @e2e",
              "fullTitle": "Partially admit the claim: I can complete the journey when I partially admit the claim with payment already made @citizen @admissions @e2e",
              "timedOut": false,
              "duration": 31292,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "\"I_can_comp_da9512b1-3d41-44c2-a57a-f463bd713e1a.failed.png\"",
              "code": "const claimRef = await I.createClaim(claimData, claimantEmail);\nawait helperSteps.enterPinNumber(claimRef, claimantEmail);\nhelperSteps.linkClaimToDefendant(defendantEmail);\nhelperSteps.startResponseFromDashboard(claimRef);\ndefenceSteps.makePartialAdmission(claimData.data.defendants[0]);\nawait defenceSteps.partialPaymentMade(party_type_1.PartyType.INDIVIDUAL);",
              "err": {
                "message": "TypeError: Cannot read property 'defendants' of undefined",
                "estack": "Cannot read property 'defendants' of undefined",
                "diff": null
              },
              "uuid": "da9512b1-3d41-44c2-a57a-f463bd713e1a",
              "parentUUID": "a42a2c36-8c4c-4809-8d23-02013314ed99",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "I can complete the journey when I partially admit the claim with immediate payment @nightly @admissions",
              "fullTitle": "Partially admit the claim: I can complete the journey when I partially admit the claim with immediate payment @nightly @admissions",
              "timedOut": false,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "defenceSteps.makePartialAdmission(claimData.data.defendants[0]);\nawait defenceSteps.partialPaymentNotMade(party_type_1.PartyType.INDIVIDUAL, payment_option_1.PaymentOption.IMMEDIATELY);",
              "err": {},
              "uuid": "40157acf-202f-4b86-b701-e931cf966de1",
              "parentUUID": "a42a2c36-8c4c-4809-8d23-02013314ed99",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can complete the journey when I partially admit the claim with by set date payment @citizen @admissions",
              "fullTitle": "Partially admit the claim: I can complete the journey when I partially admit the claim with by set date payment @citizen @admissions",
              "timedOut": false,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "defenceSteps.makePartialAdmission(claimData.data.defendants[0]);\nawait defenceSteps.partialPaymentNotMade(party_type_1.PartyType.INDIVIDUAL, payment_option_1.PaymentOption.BY_SET_DATE);",
              "err": {},
              "uuid": "743b5ec2-28ec-4339-9e3b-28e18c542311",
              "parentUUID": "a42a2c36-8c4c-4809-8d23-02013314ed99",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can complete the journey when I partially admit the claim with instalments payment @nightly @admissions",
              "fullTitle": "Partially admit the claim: I can complete the journey when I partially admit the claim with instalments payment @nightly @admissions",
              "timedOut": false,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "defenceSteps.makePartialAdmission(claimData.data.defendants[0]);\nawait defenceSteps.partialPaymentNotMade(party_type_1.PartyType.INDIVIDUAL, payment_option_1.PaymentOption.INSTALMENTS);",
              "err": {},
              "uuid": "3b3462b7-e5f2-438b-95fb-f095959e6f00",
              "parentUUID": "a42a2c36-8c4c-4809-8d23-02013314ed99",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "da9512b1-3d41-44c2-a57a-f463bd713e1a"
          ],
          "pending": [],
          "skipped": [
            "40157acf-202f-4b86-b701-e931cf966de1",
            "743b5ec2-28ec-4339-9e3b-28e18c542311",
            "3b3462b7-e5f2-438b-95fb-f095959e6f00"
          ],
          "duration": 31292,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "ea4e49fa-9de3-47a8-adad-fd27c9639a53",
          "title": "E2E tests for defence journeys",
          "fullFile": "/Users/ZeroZerp/Documents/HMCTS/2026/cmc-citizen-frontend/src/integration-test/tests/citizen/endToEnd/defence_test.ts",
          "file": "/src/integration-test/tests/citizen/endToEnd/defence_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "E2E tests for defence journeys \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "1fa7111d-e495-4407-9112-367a1717f463",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "E2E tests for defence journeys \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "f5dcd813-03e0-4afc-b044-f172117ebdae",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "E2E tests for defence journeys \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "81805793-71f1-4bfe-b8be-f464be2414b2",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "E2E tests for defence journeys \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "79bdce8f-e129-4b40-9eda-03c291c06cb3",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "I can as an Individual make a claim against an Individual who then fully defends and I proceed with the claim @citizen",
              "fullTitle": "E2E tests for defence journeys: I can as an Individual make a claim against an Individual who then fully defends and I proceed with the claim @citizen",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testData = await EndToEndTestData_1.EndToEndTestData.prepareData(I, party_type_1.PartyType.INDIVIDUAL, party_type_1.PartyType.INDIVIDUAL);\nconst claimData = await test_data_1.createClaimData(I, party_type_1.PartyType.INDIVIDUAL, party_type_1.PartyType.INDIVIDUAL);\ntestData.defenceType = defence_type_1.DefenceType.FULL_REJECTION_WITH_DISPUTE;\ntestData.defendantClaimsToHavePaidInFull = true;\nawait helperSteps.finishResponse(testData);\nI.see(testData.claimRef);\n// check dashboard\nI.click('My account');\n// check status\nI.click(testData.claimRef);\nI.see(testData.claimRef);\nI.see('Your response to the claim');\nI.see('You have rejected the claim');\ndefendantDetails.clickViewClaim();\ndefendantDetails.checkClaimData(testData.claimRef, claimData);\nI.click('Sign out');\n// as claimant\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.viewClaimFromDashboard(testData.claimRef);\nI.see(testData.claimRef);\nI.see('Decide whether to proceed');\nI.see('Mrs. Rose Smith has rejected your claim.');\nI.click('View and respond');\nclaimantResponseSteps.decideToProceed();\ncheckAndSendPage.checkFactsTrueAndSubmit(testData.defenceType);\nI.see('You’ve rejected their response');",
              "err": {},
              "uuid": "521acbcc-e59d-4b7c-b55c-820ac50aea7e",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can as an Individual make a claim against an Individual who then fully defends and I accept their response @nightly",
              "fullTitle": "E2E tests for defence journeys: I can as an Individual make a claim against an Individual who then fully defends and I accept their response @nightly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testData = await EndToEndTestData_1.EndToEndTestData.prepareData(I, party_type_1.PartyType.INDIVIDUAL, party_type_1.PartyType.INDIVIDUAL);\nconst claimData = await test_data_1.createClaimData(I, party_type_1.PartyType.INDIVIDUAL, party_type_1.PartyType.INDIVIDUAL);\ntestData.defenceType = defence_type_1.DefenceType.FULL_REJECTION_WITH_DISPUTE;\ntestData.defendantClaimsToHavePaidInFull = true;\nawait helperSteps.finishResponse(testData);\nI.see(testData.claimRef);\n// check dashboard\nI.click('My account');\n// check status\nI.click(testData.claimRef);\nI.see(testData.claimRef);\nI.see('Your response to the claim');\nI.see('You have rejected the claim');\ndefendantDetails.clickViewClaim();\ndefendantDetails.checkClaimData(testData.claimRef, claimData);\nI.click('Sign out');\n// as claimant\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.viewClaimFromDashboard(testData.claimRef);\nI.see(testData.claimRef);\nI.see('Decide whether to proceed');\nI.see('Mrs. Rose Smith has rejected your claim.');\nI.click('View and respond');\nclaimantResponseSteps.decideNotToProceed();",
              "err": {},
              "uuid": "0c2251cc-44ee-4d9c-b723-38604a358427",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can as an Individual make a claim against an Individual who then fully rejects the claim as they have already paid the full amount and I proceed with the claim @citizen",
              "fullTitle": "E2E tests for defence journeys: I can as an Individual make a claim against an Individual who then fully rejects the claim as they have already paid the full amount and I proceed with the claim @citizen",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testData = await EndToEndTestData_1.EndToEndTestData.prepareData(I, party_type_1.PartyType.INDIVIDUAL, party_type_1.PartyType.INDIVIDUAL);\ntestData.defenceType = defence_type_1.DefenceType.FULL_REJECTION_BECAUSE_FULL_AMOUNT_IS_PAID;\nawait helperSteps.finishResponse(testData);\nI.click('My account');\nI.see(testData.claimRef);\nI.click(testData.claimRef);\nI.see(`We’ve emailed ${testData.claimantName} telling them when and how you said you paid the claim`);\nI.click('Sign out');\n// as claimant\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.viewClaimFromDashboard(testData.claimRef);\nI.see(testData.claimRef);\nI.see('Decide whether to proceed');\nI.see('Mrs. Rose Smith has rejected your claim.');\nI.click('View and respond');\nclaimantResponseSteps.rejectFullDefencePaidFullAmount(testData);\nI.see('You’ve rejected their response');",
              "err": {},
              "uuid": "e0ab96fd-d293-4195-9811-c9740b0b3e7b",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can as an Individual make a claim against an Individual who then rejects the claim as they have paid the full amount then I accept the defence @nightly",
              "fullTitle": "E2E tests for defence journeys: I can as an Individual make a claim against an Individual who then rejects the claim as they have paid the full amount then I accept the defence @nightly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testData = await EndToEndTestData_1.EndToEndTestData.prepareData(I, party_type_1.PartyType.INDIVIDUAL, party_type_1.PartyType.INDIVIDUAL);\nconst claimantResponseTestData = new ClaimantResponseTestData_1.ClaimantResponseTestData();\nclaimantResponseTestData.pageSpecificValues.howMuchHaveYouPaidPageEnterAmountPaidWithDateAndExplanation = {\n    paidAmount: 105.5,\n    date: '2018-01-01',\n    explanation: 'My explanation...'\n};\n// as defendant\nawait defendantResponseSteps.disputeClaimAsAlreadyPaid(I, testData, claimantResponseTestData, true);\nI.see(testData.claimRef);\nI.see(`You told us you’ve paid £105.50. We’ve sent ${testData.claimantName} this response`);\n// check dashboard\nI.click('My account');\nI.see('Wait for the claimant to respond');\n// check status\nI.click(testData.claimRef);\nI.see(testData.claimRef);\nI.see(`We’ve emailed ${testData.claimantName} telling them when and how you said you paid the claim.`);\nI.click('Sign out');\n// as claimant\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.viewClaimFromDashboard(testData.claimRef);\n// check dashboard\nI.click('My account');\nI.see(testData.claimRef);\nI.see('Decide whether to proceed');\nI.click(testData.claimRef);\nI.see(testData.claimRef);\nI.see(`${testData.defendantName} has rejected your claim.`);\nI.click('View and respond');\nclaimantResponseSteps.acceptFullDefencePaidFullAmount(testData);\nI.click('Sign out');",
              "err": {},
              "uuid": "2ece0244-16af-491c-82e3-72a8044b877f",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can as an Individual make a claim against an Individual who then rejects the claim as they have paid less than the amount claimed and I then accept their defence @nightly",
              "fullTitle": "E2E tests for defence journeys: I can as an Individual make a claim against an Individual who then rejects the claim as they have paid less than the amount claimed and I then accept their defence @nightly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testData = await EndToEndTestData_1.EndToEndTestData.prepareData(I, party_type_1.PartyType.INDIVIDUAL, party_type_1.PartyType.INDIVIDUAL);\nconst claimantResponseTestData = new ClaimantResponseTestData_1.ClaimantResponseTestData();\nclaimantResponseTestData.pageSpecificValues.howMuchHaveYouPaidPageEnterAmountPaidWithDateAndExplanation = {\n    paidAmount: 50,\n    date: '2018-01-01',\n    explanation: 'My explanation...'\n};\n// as defendant\nawait defendantResponseSteps.disputeClaimAsAlreadyPaid(I, testData, claimantResponseTestData, false);\nI.see(testData.claimRef);\nI.see(`You told us you’ve paid the £${Number(50).toLocaleString()} you believe you owe. We’ve sent ${testData.claimantName} this response.`);\n// check dashboard\nI.click('My account');\nI.see(`We’ve emailed ${testData.claimantName} telling them when and how you said you paid the claim.`);\n// check status\nI.click(testData.claimRef);\nI.see(testData.claimRef);\nI.see(`We’ve emailed ${testData.claimantName} telling them when and how you said you paid the claim.`);\nI.click('Sign out');\n// as claimant\nuserSteps.login(testData.claimantEmail);\nI.see(`Respond to the defendant.`);\nclaimantResponseSteps.viewClaimFromDashboard(testData.claimRef);\nI.see(testData.claimRef);\nI.see('Respond to the defendant');\nI.see(`${testData.defendantName} says they paid you £50 on 1 January 2018.`);\nI.click('Respond');\nclaimantResponseSteps.acceptFullDefencePaidLessThanFullAmount();\nI.click('Sign out');",
              "err": {},
              "uuid": "d2558bc3-c2ca-493c-920f-99e5f7faba68",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can as an Individual make a claim against an Individual who then rejects the claim as they have paid less than the amount claimed and I then proceed with the claim @citizen",
              "fullTitle": "E2E tests for defence journeys: I can as an Individual make a claim against an Individual who then rejects the claim as they have paid less than the amount claimed and I then proceed with the claim @citizen",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testData = await EndToEndTestData_1.EndToEndTestData.prepareData(I, party_type_1.PartyType.INDIVIDUAL, party_type_1.PartyType.INDIVIDUAL);\nconst claimantResponseTestData = new ClaimantResponseTestData_1.ClaimantResponseTestData();\nclaimantResponseTestData.pageSpecificValues.howMuchHaveYouPaidPageEnterAmountPaidWithDateAndExplanation = {\n    paidAmount: 50,\n    date: '2018-01-01',\n    explanation: 'My explanation...'\n};\n// as defendant\nawait defendantResponseSteps.disputeClaimAsAlreadyPaid(I, testData, claimantResponseTestData, false);\nI.see(testData.claimRef);\nI.see(`You told us you’ve paid the £${Number(50).toLocaleString()} you believe you owe. We’ve sent ${testData.claimantName} this response.`);\n// check dashboard\nI.click('My account');\nI.see(`We’ve emailed ${testData.claimantName} telling them when and how you said you paid the claim.`);\n// check status\nI.click(testData.claimRef);\nI.see(testData.claimRef);\nI.see(`We’ve emailed ${testData.claimantName} telling them when and how you said you paid the claim.`);\nI.click('Sign out');\n// as claimant\nuserSteps.login(testData.claimantEmail);\nI.see(`Respond to the defendant.`);\nclaimantResponseSteps.viewClaimFromDashboard(testData.claimRef);\nI.see(testData.claimRef);\nI.see('Respond to the defendant');\nI.see(`${testData.defendantName} says they paid you £50 on 1 January 2018.`);\nI.click('Respond');\nclaimantResponseSteps.rejectFullDefencePaidLessThanFullAmount(testData);\nI.click('Sign out');",
              "err": {},
              "uuid": "b24ff6e7-4842-419e-aa71-b66488264bfe",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "521acbcc-e59d-4b7c-b55c-820ac50aea7e",
            "0c2251cc-44ee-4d9c-b723-38604a358427",
            "e0ab96fd-d293-4195-9811-c9740b0b3e7b",
            "2ece0244-16af-491c-82e3-72a8044b877f",
            "d2558bc3-c2ca-493c-920f-99e5f7faba68",
            "b24ff6e7-4842-419e-aa71-b66488264bfe"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "7c66df85-2116-40fb-a763-5f445db3b313",
          "title": "E2E tests for Claim and Defence response",
          "fullFile": "/Users/ZeroZerp/Documents/HMCTS/2026/cmc-citizen-frontend/src/integration-test/tests/citizen/endToEnd/endToend_test.ts",
          "file": "/src/integration-test/tests/citizen/endToEnd/endToend_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "E2E tests for Claim and Defence response \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "942759d4-dd65-46dc-87c6-cf85e6ffe213",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "E2E tests for Claim and Defence response \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "2ca45c02-7eb6-462c-b8a1-d601717cba0c",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "E2E tests for Claim and Defence response \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "7743e43b-5a2b-42b5-b5f0-12ff590bbc6f",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "E2E tests for Claim and Defence response \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "d6b07fa7-f49e-4d45-a140-e52ca726a5dc",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "I can as an Individual make a claim against an Individual Without a defendant email address and are able to pay on the Gov Pay page @citizen @crossbrowser",
              "fullTitle": "E2E tests for Claim and Defence response: I can as an Individual make a claim against an Individual Without a defendant email address and are able to pay on the Gov Pay page @citizen @crossbrowser",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testData = await EndToEndTestData_1.EndToEndTestData.prepareDataWithNoDefendantEmail(I, party_type_1.PartyType.INDIVIDUAL, party_type_1.PartyType.INDIVIDUAL);\nawait helperSteps.finishResponse(testData, false, false);",
              "err": {},
              "uuid": "fdd66794-8a76-4b66-b1d2-8e040b427f74",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can as Sole Trader make a claim against an Individual and are able to pay on the Gov Pay page @nightly",
              "fullTitle": "E2E tests for Claim and Defence response: I can as Sole Trader make a claim against an Individual and are able to pay on the Gov Pay page @nightly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testData = await EndToEndTestData_1.EndToEndTestData.prepareData(I, party_type_1.PartyType.SOLE_TRADER, party_type_1.PartyType.INDIVIDUAL);\nawait helperSteps.finishResponse(testData);",
              "err": {},
              "uuid": "a30554f9-cc14-4d2d-ab5d-1e934adcffdb",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can as a Individual make a claim against a Company and are able to pay on the Gov Pay page @nightly",
              "fullTitle": "E2E tests for Claim and Defence response: I can as a Individual make a claim against a Company and are able to pay on the Gov Pay page @nightly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testData = await EndToEndTestData_1.EndToEndTestData.prepareData(I, party_type_1.PartyType.COMPANY, party_type_1.PartyType.INDIVIDUAL);\nawait helperSteps.finishResponse(testData);",
              "err": {},
              "uuid": "3463dc55-5d8c-4afd-ad40-cc9d6f1b63b9",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can as a Company make a claim against a company and are able to pay on the Gov Pay page @nightly",
              "fullTitle": "E2E tests for Claim and Defence response: I can as a Company make a claim against a company and are able to pay on the Gov Pay page @nightly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testData = await EndToEndTestData_1.EndToEndTestData.prepareData(I, party_type_1.PartyType.COMPANY, party_type_1.PartyType.COMPANY);\nawait helperSteps.finishResponse(testData);",
              "err": {},
              "uuid": "4db21863-8eb6-4b65-bd6e-8170a4a49842",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can as a Organisation make a claim against an Individual and are able to pay on the Gov Pay page @nightly",
              "fullTitle": "E2E tests for Claim and Defence response: I can as a Organisation make a claim against an Individual and are able to pay on the Gov Pay page @nightly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testData = await EndToEndTestData_1.EndToEndTestData.prepareData(I, party_type_1.PartyType.ORGANISATION, party_type_1.PartyType.INDIVIDUAL);\nawait helperSteps.finishResponse(testData);",
              "err": {},
              "uuid": "ab48dd63-dbcc-4cde-9857-618045c9731d",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "fdd66794-8a76-4b66-b1d2-8e040b427f74",
            "a30554f9-cc14-4d2d-ab5d-1e934adcffdb",
            "3463dc55-5d8c-4afd-ad40-cc9d6f1b63b9",
            "4db21863-8eb6-4b65-bd6e-8170a4a49842",
            "ab48dd63-dbcc-4cde-9857-618045c9731d"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "5d0ad050-511f-40ee-922b-7ffff29cb2cb",
          "title": "Full Admission E2E",
          "fullFile": "/Users/ZeroZerp/Documents/HMCTS/2026/cmc-citizen-frontend/src/integration-test/tests/citizen/endToEnd/fullAdmission_test.ts",
          "file": "/src/integration-test/tests/citizen/endToEnd/fullAdmission_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "Full Admission E2E \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "76316656-fd7d-43a9-b173-4fdaaab16878",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "Full Admission E2E \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "46f66df7-4d42-48ea-bdec-d0e87df0f749",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: Before",
              "fullTitle": "Full Admission E2E \"before each\" hook: Before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errHandler = (err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n};\nrecorder.errHandler((err) => {\n  errHandler(err);\n});\nif (!fn) throw new Error('fn is not defined');\nevent.emit(event.hook.started, suite);\nif (!recorder.isRunning()) {\n  recorder.start();\n  recorder.errHandler((err) => {\n    errHandler(err);\n  });\n}\nthis.test.body = fn.toString();\nif (isAsyncFunction(fn)) {\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      errHandler(err);\n    });\n    recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, e));\n  });\n  return;\n}\ntry {\n  fn.apply(this, getInjectedArguments(fn));\n  recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n  recorder.add(`finish ${hookName} hook`, () => done());\n  recorder.catch();\n} catch (err) {\n  recorder.throw(err);\n  recorder.catch((e) => {\n    const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n    errHandler(err);\n  });\n  recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, err));\n}",
              "err": {},
              "uuid": "112439a9-4b86-4df6-983d-04eaa0fb453f",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "Full Admission E2E \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "5da824b9-2931-4e10-b526-0a3700e3ea2c",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "Full Admission E2E \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "72e78e05-9516-48e6-9b5b-7b9c705aec02",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Company agreed to pay all of the claim @nightly @citizen",
              "fullTitle": "Full Admission E2E: Company agreed to pay all of the claim @nightly @citizen",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testData.paymentOption = payment_option_1.PaymentOption.IMMEDIATELY;\nhelperSteps.finishResponseWithFullAdmission(testData);\nI.click('Sign out');\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.viewClaimFromDashboard(testData.claimRef);\nI.see(testData.claimRef);\nI.see('The defendant said they’ll pay you immediately');\nI.click('My account');\nI.see(testData.claimRef);",
              "err": {},
              "uuid": "16bba7f0-962e-4ab3-adaf-7c9e215e6aa3",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Self Employed Person agreed(Sole Trader Vs Individual) to pay all of the claim... @nightly",
              "fullTitle": "Full Admission E2E: Self Employed Person agreed(Sole Trader Vs Individual) to pay all of the claim... @nightly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testData = await EndToEndTestData_1.EndToEndTestData.prepareData(I, party_type_1.PartyType.SOLE_TRADER, party_type_1.PartyType.INDIVIDUAL);\ntestData.paymentOption = payment_option_1.PaymentOption.IMMEDIATELY;\nhelperSteps.finishResponseWithFullAdmission(testData);\nI.click('Sign out');\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.viewClaimFromDashboard(testData.claimRef);\nI.see(testData.claimRef);\nI.click('My account');\nI.see(testData.claimRef);",
              "err": {},
              "uuid": "b4bbaff4-7b92-4641-8af6-485f69e81305",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Organization agreed (Organisation Vs Individual) to pay all of the claim... @nightly",
              "fullTitle": "Full Admission E2E: Organization agreed (Organisation Vs Individual) to pay all of the claim... @nightly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testData = await EndToEndTestData_1.EndToEndTestData.prepareData(I, party_type_1.PartyType.ORGANISATION, party_type_1.PartyType.INDIVIDUAL);\ntestData.paymentOption = payment_option_1.PaymentOption.IMMEDIATELY;\nhelperSteps.finishResponseWithFullAdmission(testData);\nI.click('Sign out');\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.viewClaimFromDashboard(testData.claimRef);\nI.see(testData.claimRef);\nI.click('My account');\nI.see(testData.claimRef);",
              "err": {},
              "uuid": "71494a97-8d4a-46f2-9762-b63a73e98d48",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Defendant agreed(Individual Vs Individual) to pay all of the claim... @nightly",
              "fullTitle": "Full Admission E2E: Defendant agreed(Individual Vs Individual) to pay all of the claim... @nightly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testData = await EndToEndTestData_1.EndToEndTestData.prepareData(I, party_type_1.PartyType.INDIVIDUAL, party_type_1.PartyType.INDIVIDUAL);\ntestData.paymentOption = payment_option_1.PaymentOption.IMMEDIATELY;\nhelperSteps.finishResponseWithFullAdmission(testData);\nI.click('Sign out');\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.viewClaimFromDashboard(testData.claimRef);\nI.see(testData.claimRef);\nI.click('My account');\nI.see(testData.claimRef);",
              "err": {},
              "uuid": "0bebc30f-2ea4-42c7-bc0b-26b1a48b271d",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Organization agreed to pay all of the claim to sole trader... @nightly",
              "fullTitle": "Full Admission E2E: Organization agreed to pay all of the claim to sole trader... @nightly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testData = await EndToEndTestData_1.EndToEndTestData.prepareData(I, party_type_1.PartyType.ORGANISATION, party_type_1.PartyType.SOLE_TRADER);\ntestData.paymentOption = payment_option_1.PaymentOption.IMMEDIATELY;\nhelperSteps.finishResponseWithFullAdmission(testData);\nI.click('Sign out');\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.viewClaimFromDashboard(testData.claimRef);\nI.see(testData.claimRef);\nI.click('My account');\nI.see(testData.claimRef);",
              "err": {},
              "uuid": "db5a5834-d0e7-424c-adcb-6194ad243379",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Company agreed to pay all of the claim  to individual @nightly",
              "fullTitle": "Full Admission E2E: Company agreed to pay all of the claim  to individual @nightly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testData = await EndToEndTestData_1.EndToEndTestData.prepareData(I, party_type_1.PartyType.COMPANY, party_type_1.PartyType.INDIVIDUAL);\ntestData.paymentOption = payment_option_1.PaymentOption.IMMEDIATELY;\nhelperSteps.finishResponseWithFullAdmission(testData);\nI.click('Sign out');\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.viewClaimFromDashboard(testData.claimRef);\nI.see(testData.claimRef);\nI.click('My account');\nI.see(testData.claimRef);",
              "err": {},
              "uuid": "5694358f-fda1-4137-8a17-8424a0e72734",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "16bba7f0-962e-4ab3-adaf-7c9e215e6aa3",
            "b4bbaff4-7b92-4641-8af6-485f69e81305",
            "71494a97-8d4a-46f2-9762-b63a73e98d48",
            "0bebc30f-2ea4-42c7-bc0b-26b1a48b271d",
            "db5a5834-d0e7-424c-adcb-6194ad243379",
            "5694358f-fda1-4137-8a17-8424a0e72734"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "1c94a953-6022-4424-b2f4-d46f74ca9d91",
          "title": "Part Admission E2E",
          "fullFile": "/Users/ZeroZerp/Documents/HMCTS/2026/cmc-citizen-frontend/src/integration-test/tests/citizen/endToEnd/partAdmission_test.ts",
          "file": "/src/integration-test/tests/citizen/endToEnd/partAdmission_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "Part Admission E2E \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "7e72038e-fe5f-484d-b3bf-8e05ffa8b876",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "Part Admission E2E \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "ed760087-d9fd-4458-a36a-3ef80b0bbc3e",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: Before",
              "fullTitle": "Part Admission E2E \"before each\" hook: Before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errHandler = (err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n};\nrecorder.errHandler((err) => {\n  errHandler(err);\n});\nif (!fn) throw new Error('fn is not defined');\nevent.emit(event.hook.started, suite);\nif (!recorder.isRunning()) {\n  recorder.start();\n  recorder.errHandler((err) => {\n    errHandler(err);\n  });\n}\nthis.test.body = fn.toString();\nif (isAsyncFunction(fn)) {\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      errHandler(err);\n    });\n    recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, e));\n  });\n  return;\n}\ntry {\n  fn.apply(this, getInjectedArguments(fn));\n  recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n  recorder.add(`finish ${hookName} hook`, () => done());\n  recorder.catch();\n} catch (err) {\n  recorder.throw(err);\n  recorder.catch((e) => {\n    const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n    errHandler(err);\n  });\n  recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, err));\n}",
              "err": {},
              "uuid": "a83ca9b1-a936-4117-9e84-3af996647ddd",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "Part Admission E2E \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "892eb45e-b762-4d48-a0c4-c6465ff4bce1",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "Part Admission E2E \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "21c67023-332a-4df3-a329-2c6f7c82410f",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": " Company Rejected Part Admit Offer (Company Vs Company) @nightly @admissions",
              "fullTitle": "Part Admission E2E:  Company Rejected Part Admit Offer (Company Vs Company) @nightly @admissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testData.paymentOption = payment_option_1.PaymentOption.IMMEDIATELY;\ntestData.defenceType = defence_type_1.DefenceType.PART_ADMISSION;\ntestData.defendantClaimsToHavePaidInFull = false;\nconst claimantResponseTestData = new ClaimantResponseTestData_1.ClaimantResponseTestData();\nclaimantResponseTestData.isExpectingToSeeHowTheyWantToPayPage = true;\n// as defendant\nawait helperSteps.finishResponse(testData, false);\nI.click('Sign out');\n// as claimant\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.viewClaimFromDashboard(testData.claimRef);\nclaimantResponseSteps.respondToOffer('View and respond');\nclaimantResponseSteps.reject(testData, claimantResponseTestData);\ncheckAndSendPage.verifyFactsForPartAdmitRejection();\ncheckAndSendPage.checkFactsTrueAndSubmit(testData.defenceType);\nI.see('You agreed to try to resolve the claim using mediation');\nconfirmationPage.clickGoToYourAccount();\nI.see(testData.claimRef);",
              "err": {},
              "uuid": "79d646e1-c674-4278-89ba-06f379b49525",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "79d646e1-c674-4278-89ba-06f379b49525"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "91a8f7dc-08b0-4ca7-814c-053d7823cd87",
          "title": " Settle Claim E2E",
          "fullFile": "/Users/ZeroZerp/Documents/HMCTS/2026/cmc-citizen-frontend/src/integration-test/tests/citizen/endToEnd/settleClaim_test.ts",
          "file": "/src/integration-test/tests/citizen/endToEnd/settleClaim_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": " Settle Claim E2E \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "9e72b232-f380-476c-9fdb-0381b8f1171a",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": " Settle Claim E2E \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "af389e4d-1fa8-4151-b4a2-d49251609602",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: Before",
              "fullTitle": " Settle Claim E2E \"before each\" hook: Before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errHandler = (err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n};\nrecorder.errHandler((err) => {\n  errHandler(err);\n});\nif (!fn) throw new Error('fn is not defined');\nevent.emit(event.hook.started, suite);\nif (!recorder.isRunning()) {\n  recorder.start();\n  recorder.errHandler((err) => {\n    errHandler(err);\n  });\n}\nthis.test.body = fn.toString();\nif (isAsyncFunction(fn)) {\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      errHandler(err);\n    });\n    recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, e));\n  });\n  return;\n}\ntry {\n  fn.apply(this, getInjectedArguments(fn));\n  recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n  recorder.add(`finish ${hookName} hook`, () => done());\n  recorder.catch();\n} catch (err) {\n  recorder.throw(err);\n  recorder.catch((e) => {\n    const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n    errHandler(err);\n  });\n  recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, err));\n}",
              "err": {},
              "uuid": "844580c0-9d21-4364-b938-62b5cf9dd88a",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": " Settle Claim E2E \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "081cbbd4-69c0-4743-b264-2e6d72d9db80",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": " Settle Claim E2E \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "5781d683-6ab9-4008-a3e6-1ac34a5239a4",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Full Admission-->Settle Claim(Pay By Installment) @citizen @nightly",
              "fullTitle": " Settle Claim E2E: Full Admission-->Settle Claim(Pay By Installment) @citizen @nightly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testData.paymentOption = payment_option_1.PaymentOption.INSTALMENTS;\ntestData.claimantPaymentOption = payment_option_1.PaymentOption.INSTALMENTS;\nconst claimantResponseTestData = new ClaimantResponseTestData_1.UnreasonableClaimantResponseTestData();\nclaimantResponseTestData.isExpectingToSeeCourtOfferedInstalmentsPage = true;\nclaimantResponseTestData.pageSpecificValues.settleClaimEnterDate = '2019-01-01';\nhelperSteps.finishResponseWithFullAdmission(testData);\nI.click('Sign out');\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.acceptCcjFromDashboardWhenRejectPaymentMethod(testData, claimantResponseTestData, 'View and respond to the offer');\nI.see('County Court Judgment requested');\nconfirmationPage.clickGoToYourAccount();\nI.see(testData.claimRef);\nclaimantResponseSteps.settleClaim(testData, claimantResponseTestData, 'Tell us you’ve been paid');\nI.see('The claim is now settled');\nconfirmationPage.clickGoToYourAccount();\nI.see(testData.claimRef);\nI.see('This claim is settled.');",
              "err": {},
              "uuid": "be366b0e-aa03-429d-88d4-ea8e8b6dfa7e",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Full Admission-->Settle Claim(Pay By Set Date) @nightly",
              "fullTitle": " Settle Claim E2E: Full Admission-->Settle Claim(Pay By Set Date) @nightly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testData.paymentOption = payment_option_1.PaymentOption.BY_SET_DATE;\ntestData.claimantPaymentOption = payment_option_1.PaymentOption.BY_SET_DATE;\nconst claimantResponseTestData = new ClaimantResponseTestData_1.UnreasonableClaimantResponseTestData();\nclaimantResponseTestData.isExpectingToSeeCourtOfferedInstalmentsPage = true;\nclaimantResponseTestData.pageSpecificValues.settleClaimEnterDate = '2019-01-01';\nhelperSteps.finishResponseWithFullAdmission(testData);\nI.click('Sign out');\nuserSteps.login(testData.claimantEmail);\nclaimantResponseSteps.acceptCcjFromDashboardWhenRejectPaymentMethod(testData, claimantResponseTestData, 'View and respond to the offer');\nconfirmationPage.clickGoToYourAccount();\nI.see(testData.claimRef);\nclaimantResponseSteps.settleClaim(testData, claimantResponseTestData, 'Tell us you’ve been paid');\nI.see('The claim is now settled');\nconfirmationPage.clickGoToYourAccount();\nI.see(testData.claimRef);\nI.see('This claim is settled.');",
              "err": {},
              "uuid": "26e0f6a9-ff6d-48e7-bad0-64d2aa738dc1",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "be366b0e-aa03-429d-88d4-ea8e8b6dfa7e",
            "26e0f6a9-ff6d-48e7-bad0-64d2aa738dc1"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "f02b8b49-1ff3-44f6-b75a-93a697e9c871",
          "title": "GovUK access routes - respond to claim",
          "fullFile": "/Users/ZeroZerp/Documents/HMCTS/2026/cmc-citizen-frontend/src/integration-test/tests/citizen/govukAccessRoutes/respondToClaim_test.ts",
          "file": "/src/integration-test/tests/citizen/govukAccessRoutes/respondToClaim_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "GovUK access routes - respond to claim \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "715115b2-726d-44e9-85cd-8c80ec63c77d",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "GovUK access routes - respond to claim \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "6f61ca85-b5dc-4f76-a526-c26a3073ae08",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "GovUK access routes - respond to claim \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "d07ca6f0-66dd-4323-8f86-b04af70e7ec2",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "GovUK access routes - respond to claim \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "535eaf77-8651-4e1a-a495-d2da294920e4",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "I can enter a CCBC reference and get sent to MCOL @nightly",
              "fullTitle": "GovUK access routes - respond to claim: I can enter a CCBC reference and get sent to MCOL @nightly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "accessRoutesSteps.respondToClaimMcol();",
              "err": {},
              "uuid": "4927cc73-5a71-4871-b0de-ef470451442a",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can enter a moneyclaims reference and get sent to enter a pin @nightly",
              "fullTitle": "GovUK access routes - respond to claim: I can enter a moneyclaims reference and get sent to enter a pin @nightly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const claimantEmail = await I.getClaimantEmail();\nconst claimRef = await I.createClaim(await test_data_1.createClaimData(I, party_type_1.PartyType.SOLE_TRADER, party_type_1.PartyType.INDIVIDUAL), claimantEmail, false);\naccessRoutesSteps.respondToClaimMoneyClaims(claimRef);",
              "err": {},
              "uuid": "5b2e24aa-7b51-4590-a5ad-0becfa04c9bd",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "4927cc73-5a71-4871-b0de-ef470451442a",
            "5b2e24aa-7b51-4590-a5ad-0becfa04c9bd"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "d99d5050-3360-47f5-9b89-21a02617ffe7",
          "title": "GovUK access routes - return to claim",
          "fullFile": "/Users/ZeroZerp/Documents/HMCTS/2026/cmc-citizen-frontend/src/integration-test/tests/citizen/govukAccessRoutes/returnToClaim_test.ts",
          "file": "/src/integration-test/tests/citizen/govukAccessRoutes/returnToClaim_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "GovUK access routes - return to claim \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "d61368c4-be90-49cf-b761-7e9db6b36b4d",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "GovUK access routes - return to claim \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "452165a8-b93e-40c4-913d-c38576fa1aa9",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "GovUK access routes - return to claim \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "e2cd1eaa-5d2d-4c13-848c-e372e356aa10",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "GovUK access routes - return to claim \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "dd9c0b3a-b978-4892-8f79-556d026e6c82",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "I can enter a CCBC reference and get sent to MCOL @nightly",
              "fullTitle": "GovUK access routes - return to claim: I can enter a CCBC reference and get sent to MCOL @nightly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "accessRoutesSteps.returnToClaimMcol();",
              "err": {},
              "uuid": "f0122d15-5005-4e63-b235-a0c056fef031",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can enter a moneyclaims reference and login to see the dashboard @citizen",
              "fullTitle": "GovUK access routes - return to claim: I can enter a moneyclaims reference and login to see the dashboard @citizen",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const claimantEmail = await I.getClaimantEmail();\nconst claimRef = await I.createClaim(await test_data_1.createClaimData(I, party_type_1.PartyType.SOLE_TRADER, party_type_1.PartyType.INDIVIDUAL), claimantEmail);\naccessRoutesSteps.returnToClaimMoneyClaims(claimRef, claimantEmail);",
              "err": {},
              "uuid": "489daeac-1681-4eb8-a774-9ae2b4c99a50",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can select don’t have a claim number and choose to go to moneyclaims, login and see the dashboard @nightly",
              "fullTitle": "GovUK access routes - return to claim: I can select don’t have a claim number and choose to go to moneyclaims, login and see the dashboard @nightly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const claimantEmail = await I.getClaimantEmail();\nawait I.createClaim(await test_data_1.createClaimData(I, party_type_1.PartyType.SOLE_TRADER, party_type_1.PartyType.INDIVIDUAL), claimantEmail);\naccessRoutesSteps.dontHaveAReferenceMoneyClaims(claimantEmail);",
              "err": {},
              "uuid": "9d051d98-9e59-48d8-bb3d-ab9395568f22",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "I can select don’t have a claim number and choose to go to MCOL @nightly",
              "fullTitle": "GovUK access routes - return to claim: I can select don’t have a claim number and choose to go to MCOL @nightly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "accessRoutesSteps.dontHaveAReferenceMcol();",
              "err": {},
              "uuid": "661a7026-36b9-42bf-9549-011d931cdf29",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "f0122d15-5005-4e63-b235-a0c056fef031",
            "489daeac-1681-4eb8-a774-9ae2b4c99a50",
            "9d051d98-9e59-48d8-bb3d-ab9395568f22",
            "661a7026-36b9-42bf-9549-011d931cdf29"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "896206c7-3c8e-4192-b38b-e9246cc23761",
          "title": "Full Defence Offer E2E Tests (via) Settle Out Of Court route ",
          "fullFile": "/Users/ZeroZerp/Documents/HMCTS/2026/cmc-citizen-frontend/src/integration-test/tests/citizen/offers/offers_test.ts",
          "file": "/src/integration-test/tests/citizen/offers/offers_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "Full Defence Offer E2E Tests (via) Settle Out Of Court route  \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "df2ad700-824e-4c7c-8b35-30288a1c6b51",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "Full Defence Offer E2E Tests (via) Settle Out Of Court route  \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "c5b6a558-6a0b-4bcb-a322-216950728809",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: Before",
              "fullTitle": "Full Defence Offer E2E Tests (via) Settle Out Of Court route  \"before each\" hook: Before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errHandler = (err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n};\nrecorder.errHandler((err) => {\n  errHandler(err);\n});\nif (!fn) throw new Error('fn is not defined');\nevent.emit(event.hook.started, suite);\nif (!recorder.isRunning()) {\n  recorder.start();\n  recorder.errHandler((err) => {\n    errHandler(err);\n  });\n}\nthis.test.body = fn.toString();\nif (isAsyncFunction(fn)) {\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      errHandler(err);\n    });\n    recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, e));\n  });\n  return;\n}\ntry {\n  fn.apply(this, getInjectedArguments(fn));\n  recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n  recorder.add(`finish ${hookName} hook`, () => done());\n  recorder.catch();\n} catch (err) {\n  recorder.throw(err);\n  recorder.catch((e) => {\n    const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n    errHandler(err);\n  });\n  recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, err));\n}",
              "err": {},
              "uuid": "7c0209b1-9bba-41d2-b807-2627c9a73d71",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "Full Defence Offer E2E Tests (via) Settle Out Of Court route  \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "88bde5f1-7df9-4d02-a56e-c41c6c49182f",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "Full Defence Offer E2E Tests (via) Settle Out Of Court route  \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "701dbb05-2520-455b-bbb3-1cf13bb64fbd",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Claimant Accepted Offer @nightly @citizen",
              "fullTitle": "Full Defence Offer E2E Tests (via) Settle Out Of Court route : Claimant Accepted Offer @nightly @citizen",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userSteps.login(claimantEmail);\nofferSteps.acceptOfferFromDashboard(claimRef);\nI.seeTitleEquals('Confirmation - Money Claims');\nI.click('Sign out');",
              "err": {},
              "uuid": "3f2d15c2-b201-483d-8f1e-0e3b2ac5b39e",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Defendant Countersigned Offer @nightly @citizen",
              "fullTitle": "Full Defence Offer E2E Tests (via) Settle Out Of Court route : Defendant Countersigned Offer @nightly @citizen",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userSteps.login(claimantEmail);\nofferSteps.acceptOfferFromDashboard(claimRef);\nI.click('Sign out');\nuserSteps.login(defendantEmail);\nofferSteps.countersignOfferFromDashboard(claimRef);\nofferSteps.viewClaimFromDashboard(claimRef);",
              "err": {},
              "uuid": "8825d082-7821-44ce-a2dd-185a0004b9aa",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Claimant Rejected Offer @citizen @nightly",
              "fullTitle": "Full Defence Offer E2E Tests (via) Settle Out Of Court route : Claimant Rejected Offer @citizen @nightly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userSteps.login(claimantEmail);\nofferSteps.rejectOfferFromDashboard(claimRef);\nI.click('Sign out');\nuserSteps.login(defendantEmail);\nofferSteps.viewClaimFromDashboard(claimRef);\nI.see('The claimant has rejected your offer to settle the claim.');",
              "err": {},
              "uuid": "026e895b-41ad-4dfb-88fd-946d6cf94083",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Settle Out Of Court E2E @nightly",
              "fullTitle": "Full Defence Offer E2E Tests (via) Settle Out Of Court route : Settle Out Of Court E2E @nightly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userSteps.login(claimantEmail);\nofferSteps.acceptOfferFromDashboard(claimRef);\nI.click('Sign out');\nuserSteps.login(defendantEmail);\nofferSteps.countersignOfferFromDashboard(claimRef);\nofferSteps.viewClaimFromDashboard(claimRef);\nI.see('You’ve both signed a legal agreement. The claim is now settled.');",
              "err": {},
              "uuid": "6d9900fd-2d73-4399-85f1-0fac4913a9f5",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "3f2d15c2-b201-483d-8f1e-0e3b2ac5b39e",
            "8825d082-7821-44ce-a2dd-185a0004b9aa",
            "026e895b-41ad-4dfb-88fd-946d6cf94083",
            "6d9900fd-2d73-4399-85f1-0fac4913a9f5"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "1c18ce16-78b1-41c8-bbc0-65aa90bd86d9",
          "title": "Testing support",
          "fullFile": "/Users/ZeroZerp/Documents/HMCTS/2026/cmc-citizen-frontend/src/integration-test/tests/citizen/testingSupport/testingSupport_test.ts",
          "file": "/src/integration-test/tests/citizen/testingSupport/testingSupport_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "Testing support \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "d4c22204-d263-47a6-baed-5ab4b247b213",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "Testing support \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "50640469-8c83-49e4-a4ba-b5c399618a16",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "Testing support \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "96d2f70e-bdfa-49a8-8389-02d570574ab2",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "Testing support \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "4c0e5790-d46d-41f9-be8c-2ce233279aa3",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "I create a claim draft using testing support and submit it @nightly",
              "fullTitle": "Testing support: I create a claim draft using testing support and submit it @nightly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const email = await I.getClaimantEmail();\nuserSteps.login(email);\ntestingSupportSteps.createClaimDraft();\nclaimantCheckAndSendPage.checkFactsTrueAndSubmit();\nawait paymentSteps.payWithWorkingCard(I);\nI.waitForText('Claim submitted');",
              "err": {},
              "uuid": "790abe9b-bfd4-4787-9875-3660f61010d1",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "790abe9b-bfd4-4787-9875-3660f61010d1"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "citizen-e2e-result",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": {
        "reportDir": "/Users/ZeroZerp/Documents/HMCTS/2026/cmc-citizen-frontend/output/parallel_chunk1_35279440580426d913f716cb95e40f68_1",
        "reportFilename": "citizen-e2e-result",
        "inlineAssets": true,
        "reportTitle": "Citizen E2E tests result"
      },
      "version": "4.0.1"
    }
  }
}